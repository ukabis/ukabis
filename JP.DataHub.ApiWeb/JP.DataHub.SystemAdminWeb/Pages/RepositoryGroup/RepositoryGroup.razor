@page "/repository_group"
@using JP.DataHub.Com.Net.Http

@attribute [Authorize(Policy = "RepositoryGroup")]

@inherits AdminWebBasePage

<div class="row h-100">
    <div class="col-4 card h-100" style="min-width: 350px; overflow-y: hidden;">
        <div class="row">
            <div class="col-8 pl-2">
                <div class="my-2">
                    <h4>リポジトリグループ</h4>
                </div>
            </div>
            <div class="col-4 d-flex align-items-center justify-content-end">
                <AuthorizeView Policy="@(FunctionPolicy.RepositoryGroupWrite.ToString())">
                    <RadzenButton class="px-2" Click="@(arg => OnSelect())" Size="ButtonSize.Small" Text="新規追加"></RadzenButton>
                </AuthorizeView>
            </div>
            <div class="card-header">
                一覧
            </div>
        </div>
        <div class="row overflow-auto">
            <div class="px-0">
                @foreach (var repositoryGroup in _repositoryGroups)
                {
                    var itemClass = "list-group-item";
                    if (_selectedRepositoryGroup?.RepositoryGroupId == repositoryGroup.RepositoryGroupId)
                    {
                        itemClass += " selected";
                    }
                    <div tabindex="-1" class="@itemClass" @onclick="@(arg => OnSelect(repositoryGroup.RepositoryGroupId))">@repositoryGroup.RepositoryGroupName</div>
                }
            </div>
        </div>
    </div>
    <div class="col h-100 overflow-auto">
        @if (_selectedRepositoryGroup != null)
        {
            <RepositoryGroupEdit RepositoryGroup="_selectedRepositoryGroup" RepositoryTypes="_repositoryTypes" OnRefreshCallback="Refresh"></RepositoryGroupEdit>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public MainLayoutBase Layout { get; set; }

    [Inject]
    protected IAdminRepositoryGroupService ReposiotryGroupService { get; set; }

    private RepositoryGroupModel? _selectedRepositoryGroup;

    private List<RepositoryTypeModel>? _repositoryTypes = new();

    private List<RepositoryGroupModel>? _repositoryGroups = new();

    /// <summary>
    /// 初期レンダリング
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Layout.ToggleSpinner(true);
        }
    }

    /// <summary>
    /// 初期化
    /// </summary>
    /// <returns></returns>
    protected override async Task OnAfterInitializeAsync()
    {
        await Layout.ToggleSpinner(true);
        try
        {
            var task1 = ReposiotryGroupService.GetRepositoryGroupListAsync();
            var task2 = ReposiotryGroupService.GetRepositoryGroupTypeListAsync();
            _repositoryGroups = task1?.Result?
                   .Throw(x => !x.IsSuccessStatusCode && x.StatusCode != HttpStatusCode.NotFound, x => "リポジトリグループ一覧の取得に失敗しました。")
                   .Result;

            _repositoryTypes = task2?.Result?
                           .Throw(x => !x.IsSuccessStatusCode && x.StatusCode != HttpStatusCode.NotFound, x => "リポジトリグループタイプ一覧の取得に失敗しました。")
                           .Result;
        }
        catch (Exception e)
        {
            await Layout.ToggleSpinner(false);
            await Layout.ShowMessageDialog("リポジトリグループ", "エラーが発生しました。", errorDetail: e.ToString());
        }
        await Layout.ToggleSpinner(false);
    }

    /// <summary>
    /// 一覧から詳細表示するリポジトリグループを選択
    /// </summary>
    /// <param name="repositoryGroupId"></param>
    private async Task OnSelect(string repositoryGroupId = null)
    {
        _selectedRepositoryGroup = null;
        await Layout.ToggleSpinner(true);
        if (string.IsNullOrEmpty(repositoryGroupId))
        {
            // 新規追加
            _selectedRepositoryGroup = new RepositoryGroupModel { PhysicalRepositoryList = new(), IsEnable = true };
        }
        else
        {
            // ツリー選択
            try
            {
                _selectedRepositoryGroup = ReposiotryGroupService.GetRepositoryGroup(repositoryGroupId)
                                                                 .Throw(x => !x.IsSuccessStatusCode, x => "リポジトリグループの取得に失敗しました。")
                                                                 .Result;
            }
            catch (Exception e)
            {
                await Layout.ShowMessageDialog("リポジトリグループ取得失敗", "リポジトリグループの取得に失敗しました。", errorDetail: e.ToString());
                return;
            }
        }
        await Layout.ToggleSpinner(false);
    }

    /// <summary>
    /// リポジトリ一覧データ再取得
    /// </summary>
    private async Task Refresh(bool isDeleted = false)
    {
        await Layout.ToggleSpinner(true);

        try
        {
            _repositoryGroups = ReposiotryGroupService.GetRepositoryGroupList()
                .Throw(x => !x.IsSuccessStatusCode && x.StatusCode != HttpStatusCode.NotFound, x => "リポジトリグループ一覧の取得に失敗しました。")
                .Result;
        }
        catch (Exception e)
        {
            await Layout.ShowMessageDialog("リポジトリグループ", "エラーが発生しました。", errorDetail: e.ToString());
        }

        await Layout.ToggleSpinner(false);

        if (isDeleted)
        {
            _selectedRepositoryGroup = null;
        }
    }
}
