@*以下のサイトを参考に作成*@
@*https://sinclairinat0r.com/2019/12/08/creating-a-simple-wizard-component-in-blazor*@
@*https://github.com/snickler/samples*@

@using Microsoft.AspNetCore.Components;
@using System;
@using System.Collections.Generic;

<CascadingValue Value="this">
    <div>
        <ul class="d-flex justify-content-evenly">
            @foreach (var step in Steps)
            {
                @if (ActiveStep == step)
                {
                    <li class="list-inline-item"><b>@step.Name</b></li>
                }
                else
                {
                    <li class="list-inline-item">@step.Name</li>
                }

            }
        </ul>
        <div class="p-2 border-top">
            <div id="container-fluid">
                @ChildContent
            </div>
        </div>
    </div>
    <div class="row justify-content-center mt-5" hidden=@HiddenStepButton>
        <div class="col-3">
            <RadzenButton Text="戻る" Disabled=@(ActiveStepIndex == 0) ButtonStyle="ButtonStyle.Primary" Click="GoBack"/>
        </div>
        <div class="col-3">
            <RadzenButton Text=@(IsLastStep ? "作成" : "次へ") ButtonStyle=@(IsLastStep ? ButtonStyle.Success : ButtonStyle.Primary) Click="@(arg => GoNext(GoNextFunc))"/>
        </div>
    </div>
</CascadingValue>

@code {
    /// <summary>
    /// List of <see cref="WizardStep"/> added to the Wizard
    /// </summary>
    protected internal List<WizardStep> Steps = new List<WizardStep>();

    /// <summary>
    /// Show step button
    /// </summary>
    [Parameter]
    public bool HiddenStepButton { get; set; }

    /// <summary>
    /// The ChildContent container for <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// The Active <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public WizardStep ActiveStep { get; set; }

    /// <summary>
    /// The Index number of the <see cref="ActiveStep"/>
    /// </summary>
    [Parameter]
    public int ActiveStepIndex { get; set; }

    /// <summary>
    /// The Index number of the <see cref="ActiveStep"/>
    /// </summary>
    [Parameter]
    public Func<bool> GoNextFunc { get; set; }


    /// <summary>
    /// Determines whether the Wizard is in the last step
    /// </summary>

    public bool IsLastStep { get; set; }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the previous Index
    /// </summary>

    protected internal void GoBack()
    {
        if (ActiveStepIndex > 0)
            SetActive(Steps[ActiveStepIndex - 1]);
    }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the next Index
    /// </summary>
    protected internal void GoNext(Func<bool> func)
    {
        // 関数の結果がfalseのときはページを進めない
        if (func() == false) return;

        if (ActiveStepIndex < Steps.Count - 1)
            SetActive(Steps[(Steps.IndexOf(ActiveStep) + 1)]);
    }

    /// <summary>
    /// Populates the <see cref="ActiveStep"/> the Sets the passed in <see cref="WizardStep"/> instance as the
    /// </summary>
    /// <param name="step">The WizardStep</param>

    protected internal void SetActive(WizardStep step)
    {
        ActiveStep = step ?? throw new ArgumentNullException(nameof(step));

        ActiveStepIndex = StepsIndex(step);
        if (ActiveStepIndex == Steps.Count - 1)
            IsLastStep = true;
        else
            IsLastStep = false;
    }

    /// <summary>
    /// Retrieves the index of the current <see cref="WizardStep"/> in the Step List
    /// </summary>
    /// <param name="step">The WizardStep</param>
    /// <returns></returns>
    public int StepsIndex(WizardStep step) => StepsIndexInternal(step);
    protected int StepsIndexInternal(WizardStep step)
    {
        if (step == null)
            throw new ArgumentNullException(nameof(step));

        return Steps.IndexOf(step);
    }
    /// <summary>
    /// Adds a <see cref="WizardStep"/> to the WizardSteps list
    /// </summary>
    /// <param name="step"></param>
    protected internal void AddStep(WizardStep step)
    {
        Steps.Add(step);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetActive(Steps[0]);
            StateHasChanged();
        }
    }
}
