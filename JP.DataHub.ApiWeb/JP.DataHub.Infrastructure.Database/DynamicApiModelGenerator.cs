
// This file was automatically generated by the Dapper.SimpleCRUD T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DynamicApi`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=tcp:jpdatahubdev.database.windows.net,1433;Initial Catalog=DynamicApiSqlServer;Persist Security Info=False;User ID=agri;Password=******;`
//     Include Views:          `True`

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.Generic;
using Msgpack=MessagePack;
using JP.DataHub.Com.Validations.Attributes;

namespace JP.DataHub.Infrastructure.Database.DynamicApi
{
    public static class DatabaseConst
    {
        public const string DATABASE = "DynamicApi";
        public const string TABLE_APIMULTILANGUAGE = "ApiMultiLanguage";
        public const string TABLE_CATEGORYMULTILANGUAGE = "CategoryMultiLanguage";
        public const string TABLE_CONTROLLERMULTILANGUAGE = "ControllerMultiLanguage";
        public const string TABLE_STAFF = "Staff";
        public const string TABLE_DATASCHEMAMULTILANGUAGE = "DataSchemaMultiLanguage";
        public const string TABLE_FIELDMULTILANGUAGE = "FieldMultiLanguage";
        public const string TABLE_CONTROLLERWEBHOOK = "ControllerWebhook";
        public const string TABLE_LOCALE = "Locale";
        public const string TABLE_SYSTEMMULTILANGUAGE = "SystemMultiLanguage";
        public const string TABLE_TAGMULTILANGUAGE = "TagMultiLanguage";
        public const string TABLE_VENDORMULTILANGUAGE = "VendorMultiLanguage";
        public const string TABLE_APIACCESSOPENID = "ApiAccessOpenId";
        public const string TABLE_CERTIFIEDAPPLICATION = "CertifiedApplication";
        public const string TABLE_CONTROLLERRESOURCEGROUP = "ControllerResourceGroup";
        public const string TABLE_RESOURCEGROUP = "ResourceGroup";
        public const string TABLE_RESOURCEGROUPTYPE = "ResourceGroupType";
        public const string TABLE_REVOKEHISTORY = "RevokeHistory";
        public const string TABLE_CONTROLLERPRICIES = "ControllerPricies";
        public const string TABLE_CONST = "Const";
        public const string TABLE_TERMS = "Terms";
        public const string TABLE_TERMSGROUP = "TermsGroup";
        public const string TABLE_USER = "User";
        public const string TABLE_USERGROUP = "UserGroup";
        public const string TABLE_USERGROUPMAP = "UserGroupMap";
        public const string TABLE_USERRESOURCESHARE = "UserResourceShare";
        public const string TABLE_USERREVOKE = "UserRevoke";
        public const string TABLE_USERSHAREDTYPE = "UserSharedType";
        public const string TABLE_USERTERMS = "UserTerms";
        public const string TABLE_VENDORCONTROLLERAGREEMENT = "VendorControllerAgreement";
        public const string TABLE_SYSTEM = "System";
        public const string TABLE_ACTIONTYPE = "ActionType";
        public const string TABLE_VENDOR = "Vendor";
        public const string TABLE_API = "Api";
        public const string TABLE_RESOURCESHARINGPERSONRULE = "ResourceSharingPersonRule";
        public const string TABLE_CONTAINERDYNAMICSEPARATION = "ContainerDynamicSeparation";
        public const string TABLE_APIACCESSVENDOR = "ApiAccessVendor";
        public const string TABLE_APICOMBINATIONCONSTRAINTS = "ApiCombinationConstraints";
        public const string TABLE_APIIPFILTER = "ApiIpFilter";
        public const string TABLE_QUERYTYPE = "QueryType";
        public const string TABLE_APILINK = "ApiLink";
        public const string TABLE_APIOPENIDCA = "ApiOpenIdCA";
        public const string TABLE_CATEGORY = "Category";
        public const string TABLE_COMMONIPFILTER = "CommonIpFilter";
        public const string TABLE_COMMONIPFILTERGROUP = "CommonIpFilterGroup";
        public const string TABLE_DUMMY = "Dummy";
        public const string TABLE_CONTROLLER = "Controller";
        public const string TABLE_CONTROLLERCATEGORY = "ControllerCategory";
        public const string TABLE_VENDORMAILTEMPLATE = "VendorMailTemplate";
        public const string TABLE_CONTROLLERCOMMONIPFILTERGROUP = "ControllerCommonIpFilterGroup";
        public const string TABLE_CONTROLLERFIELD = "ControllerField";
        public const string TABLE_CONTROLLERIPFILTER = "ControllerIpFilter";
        public const string TABLE_CONTROLLEROPENIDCA = "ControllerOpenIdCA";
        public const string TABLE_CONTROLLERTAG = "ControllerTag";
        public const string TABLE_DATASCHEMA = "DataSchema";
        public const string TABLE_CERTIFIEDAPPLICATION = "CertifiedApplication";
        public const string TABLE_FIELD = "Field";
        public const string TABLE_CONTROLLERRESOURCEGROUP = "ControllerResourceGroup";
        public const string TABLE_HTTPMETHODTYPE = "HttpMethodType";
        public const string TABLE_RESOURCEGROUP = "ResourceGroup";
        public const string TABLE_LANGUAGE = "Language";
        public const string TABLE_OPENIDCERTIFICATIONAUTHORITY = "OpenIdCertificationAuthority";
        public const string TABLE_PHYSICALREPOSITORY = "PhysicalRepository";
        public const string TABLE_RESOURCEGROUPTYPE = "ResourceGroupType";
        public const string TABLE_REVOKEHISTORY = "RevokeHistory";
        public const string TABLE_REPOSITORYGROUP = "RepositoryGroup";
        public const string TABLE_TERMS = "Terms";
        public const string TABLE_TERMSGROUP = "TermsGroup";
        public const string TABLE_REPOSITORYTYPE = "RepositoryType";
        public const string TABLE_USER = "User";
        public const string TABLE_RESOURCESHARINGRULE = "ResourceSharingRule";
        public const string TABLE_USERGROUP = "UserGroup";
        public const string TABLE_USERGROUPMAP = "UserGroupMap";
        public const string TABLE_SAMPLECODE = "SampleCode";
        public const string TABLE_USERRESOURCESHARE = "UserResourceShare";
        public const string TABLE_SCRIPTTYPE = "ScriptType";
        public const string TABLE_USERREVOKE = "UserRevoke";
        public const string TABLE_SECONDARYREPOSITORYMAP = "SecondaryRepositoryMap";
        public const string TABLE_CONTROLLERMAILTEMPLATE = "ControllerMailTemplate";
        public const string TABLE_SYSTEMLINK = "SystemLink";
        public const string TABLE_USERSHAREDTYPE = "UserSharedType";
        public const string TABLE_USERTERMS = "UserTerms";
        public const string TABLE_TAG = "Tag";
        public const string TABLE_TAGTYPE = "TagType";
        public const string TABLE_VENDORLINK = "VendorLink";
        public const string TABLE_VENDOROPENIDCA = "VendorOpenIdCA";
        public const string TABLE_VENDORREPOSITORYGROUP = "VendorRepositoryGroup";

        public const string COLUMN_APIMULTILANGUAGE_API_LANG_ID = "api_lang_id";
        public const string COLUMN_APIMULTILANGUAGE_API_ID = "api_id";
        public const string COLUMN_APIMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_APIMULTILANGUAGE_API_DESCRIPTION = "api_description";
        public const string COLUMN_APIMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_APIMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_APIMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_APIMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_APIMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_CATEGORYMULTILANGUAGE_CATEGORY_LANG_ID = "category_lang_id";
        public const string COLUMN_CATEGORYMULTILANGUAGE_CATEGORY_ID = "category_id";
        public const string COLUMN_CATEGORYMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_CATEGORYMULTILANGUAGE_CATEGORY_NAME = "category_name";
        public const string COLUMN_CATEGORYMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_CATEGORYMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_CATEGORYMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_CATEGORYMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_CATEGORYMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_CONTROLLER_LANG_ID = "controller_lang_id";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_CONTROLLER_DESCRIPTION = "controller_description";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_CONTROLLER_NAME = "controller_name";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_FEE_DESCRIPTION = "fee_description";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_RESOURCE_CREATE_USER = "resource_create_user";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_RESOURCE_MAINTAINER = "resource_maintainer";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_UPDATE_FREQUENCY = "update_frequency";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_CONTACT_INFORMATION = "contact_information";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_VERSION = "version";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_AGREE_DESCRIPTION = "agree_description";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_STAFF_STAFF_ID = "staff_id";
        public const string COLUMN_STAFF_ACCOUNT = "account";
        public const string COLUMN_STAFF_VENDOR_ID = "vendor_id";
        public const string COLUMN_STAFF_REG_DATE = "reg_date";
        public const string COLUMN_STAFF_REG_USERNAME = "reg_username";
        public const string COLUMN_STAFF_UPD_DATE = "upd_date";
        public const string COLUMN_STAFF_UPD_USERNAME = "upd_username";
        public const string COLUMN_STAFF_IS_ACTIVE = "is_active";
        public const string COLUMN_STAFF_EMAIL_ADDRESS = "email_address";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_DATA_SCHEMA_LANG_ID = "data_schema_lang_id";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_DATA_SCHEMA_ID = "data_schema_id";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_SCHEMA_DESCRIPTION = "schema_description";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_DATASCHEMAMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_FIELDMULTILANGUAGE_FIELD_LANG_ID = "field_lang_id";
        public const string COLUMN_FIELDMULTILANGUAGE_FIELD_ID = "field_id";
        public const string COLUMN_FIELDMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_FIELDMULTILANGUAGE_FIELD_NAME = "field_name";
        public const string COLUMN_FIELDMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_FIELDMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_FIELDMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_FIELDMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_FIELDMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERWEBHOOK_CONTROLLER_WEBHOOK_ID = "controller_webhook_id";
        public const string COLUMN_CONTROLLERWEBHOOK_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERWEBHOOK_VENDOR_ID = "vendor_id";
        public const string COLUMN_CONTROLLERWEBHOOK_URL = "url";
        public const string COLUMN_CONTROLLERWEBHOOK_HEADERS = "headers";
        public const string COLUMN_CONTROLLERWEBHOOK_NOTIFY_REGISTER = "notify_register";
        public const string COLUMN_CONTROLLERWEBHOOK_NOTIFY_UPDATE = "notify_update";
        public const string COLUMN_CONTROLLERWEBHOOK_NOTIFY_DELETE = "notify_delete";
        public const string COLUMN_CONTROLLERWEBHOOK_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERWEBHOOK_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERWEBHOOK_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERWEBHOOK_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERWEBHOOK_IS_ACTIVE = "is_active";
        public const string COLUMN_LOCALE_LOCALE_CODE = "locale_code";
        public const string COLUMN_LOCALE_REG_DATE = "reg_date";
        public const string COLUMN_LOCALE_REG_USERNAME = "reg_username";
        public const string COLUMN_LOCALE_UPD_DATE = "upd_date";
        public const string COLUMN_LOCALE_UPD_USERNAME = "upd_username";
        public const string COLUMN_LOCALE_IS_ACTIVE = "is_active";
        public const string COLUMN_SYSTEMMULTILANGUAGE_SYSTEM_LANG_ID = "system_lang_id";
        public const string COLUMN_SYSTEMMULTILANGUAGE_SYSTEM_ID = "system_id";
        public const string COLUMN_SYSTEMMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_SYSTEMMULTILANGUAGE_SYSTEM_NAME = "system_name";
        public const string COLUMN_SYSTEMMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_SYSTEMMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_SYSTEMMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_TAGMULTILANGUAGE_TAG_LANG_ID = "tag_lang_id";
        public const string COLUMN_TAGMULTILANGUAGE_TAG_ID = "tag_id";
        public const string COLUMN_TAGMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_TAGMULTILANGUAGE_TAG_NAME = "tag_name";
        public const string COLUMN_TAGMULTILANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_TAGMULTILANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_TAGMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_TAGMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_TAGMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDORMULTILANGUAGE_VENDOR_LANG_ID = "vendor_lang_id";
        public const string COLUMN_VENDORMULTILANGUAGE_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDORMULTILANGUAGE_LOCALE_CODE = "locale_code";
        public const string COLUMN_VENDORMULTILANGUAGE_VENDOR_NAME = "vendor_name";
        public const string COLUMN_VENDORMULTILANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_VENDORMULTILANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDORMULTILANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_APIACCESSOPENID_API_ACCESS_OPENID = "api_access_openId";
        public const string COLUMN_APIACCESSOPENID_API_ID = "api_id";
        public const string COLUMN_APIACCESSOPENID_OPEN_ID = "open_id";
        public const string COLUMN_APIACCESSOPENID_IS_ENABLE = "is_enable";
        public const string COLUMN_APIACCESSOPENID_ACCESS_KEY = "access_key";
        public const string COLUMN_APIACCESSOPENID_REG_DATE = "reg_date";
        public const string COLUMN_APIACCESSOPENID_REG_USERNAME = "reg_username";
        public const string COLUMN_APIACCESSOPENID_UPD_DATE = "upd_date";
        public const string COLUMN_APIACCESSOPENID_UPD_USERNAME = "upd_username";
        public const string COLUMN_APIACCESSOPENID_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERPRICIES_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERPRICIES_PRICE_EXCLUDING_PURCHASE_TAX = "price_excluding_purchase_tax";
        public const string COLUMN_CONTROLLERPRICIES_PRICE_INCLUDING_PURCHASE_TAX = "price_including_purchase_tax";
        public const string COLUMN_CONTROLLERPRICIES_PRICE_EXCLUDING_SALES_TAX = "price_excluding_sales_tax";
        public const string COLUMN_CONTROLLERPRICIES_PRICE_INCLUDING_SALES_TAX = "price_including_sales_tax";
        public const string COLUMN_CONTROLLERPRICIES_SWITCHED_DATETIME = "switched_datetime";
        public const string COLUMN_CONTROLLERPRICIES_SWITCHED_PRICE_EXCLUDING_PURCHASE_TAX = "switched_price_excluding_purchase_tax";
        public const string COLUMN_CONTROLLERPRICIES_SWITCHED_PRICE_INCLUDING_PURCHASE_TAX = "switched_price_including_purchase_tax";
        public const string COLUMN_CONTROLLERPRICIES_SWITCHED_PRICE_EXCLUDING_SALES_TAX = "switched_price_excluding_sales_tax";
        public const string COLUMN_CONTROLLERPRICIES_SWITCHED_PRICE_INCLUDING_SALES_TAX = "switched_price_including_sales_tax";
        public const string COLUMN_CONTROLLERPRICIES_SALES_START_DATETIME = "sales_start_datetime";
        public const string COLUMN_CONTROLLERPRICIES_SALES_END_DATETIME = "sales_end_datetime";
        public const string COLUMN_CONTROLLERPRICIES_PUBLIC_START_DATETIME = "public_start_datetime";
        public const string COLUMN_CONTROLLERPRICIES_PUBLIC_END_DATETIME = "public_end_datetime";
        public const string COLUMN_CONTROLLERPRICIES_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERPRICIES_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERPRICIES_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERPRICIES_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERPRICIES_IS_ACTIVE = "is_active";
        public const string COLUMN_CONST_CONST_KEY = "const_key";
        public const string COLUMN_CONST_CONST_VALUE = "const_value";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_VENDOR_CONTROLLER_AGREEMENT_ID = "vendor_controller_agreement_id";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_CONTROLLER_ID = "controller_id";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_AGREEMENT_OPEN_ID = "agreement_open_id";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_AGREEMENT_DATE = "agreement_date";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_RESULT = "result";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_APPROVAL_OPEN_ID = "approval_open_id";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_RESULT_DATE = "result_date";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_REASON = "reason";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_REG_DATE = "reg_date";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_REG_USERNAME = "reg_username";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_UPD_DATE = "upd_date";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDORCONTROLLERAGREEMENT_IS_ACTIVE = "is_active";
        public const string COLUMN_SYSTEM_SYSTEM_ID = "system_id";
        public const string COLUMN_SYSTEM_VENDOR_ID = "vendor_id";
        public const string COLUMN_SYSTEM_SYSTEM_NAME = "system_name";
        public const string COLUMN_SYSTEM_IS_ENABLE = "is_enable";
        public const string COLUMN_SYSTEM_UPD_DATE = "upd_date";
        public const string COLUMN_SYSTEM_UPD_USERNAME = "upd_username";
        public const string COLUMN_SYSTEM_IS_ACTIVE = "is_active";
        public const string COLUMN_ACTIONTYPE_ACTION_TYPE_CD = "action_type_cd";
        public const string COLUMN_ACTIONTYPE_ACTION_TYPE_NAME = "action_type_name";
        public const string COLUMN_ACTIONTYPE_REG_DATE = "reg_date";
        public const string COLUMN_ACTIONTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_ACTIONTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_ACTIONTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_ACTIONTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_ACTIONTYPE_IS_VISIBLE = "is_visible";
        public const string COLUMN_VENDOR_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDOR_VENDOR_NAME = "vendor_name";
        public const string COLUMN_VENDOR_IS_ENABLE = "is_enable";
        public const string COLUMN_VENDOR_UPD_DATE = "upd_date";
        public const string COLUMN_VENDOR_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDOR_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDOR_IS_DATA_USE = "is_data_use";
        public const string COLUMN_VENDOR_IS_DATA_OFFER = "is_data_offer";
        public const string COLUMN_API_API_ID = "api_id";
        public const string COLUMN_API_API_DESCRIPTION = "api_description";
        public const string COLUMN_API_CONTROLLER_ID = "controller_id";
        public const string COLUMN_API_METHOD_TYPE = "method_type";
        public const string COLUMN_API_URL = "url";
        public const string COLUMN_API_REPOSITORY_KEY = "repository_key";
        public const string COLUMN_API_REQUEST_SCHEMA_ID = "request_schema_id";
        public const string COLUMN_API_RESPONSE_SCHEMA_ID = "response_schema_id";
        public const string COLUMN_API_URL_SCHEMA_ID = "url_schema_id";
        public const string COLUMN_API_POST_DATA_TYPE = "post_data_type";
        public const string COLUMN_API_QUERY = "query";
        public const string COLUMN_API_REPOSITORY_GROUP_ID = "repository_group_id";
        public const string COLUMN_API_IS_ENABLE = "is_enable";
        public const string COLUMN_API_IS_HEADER_AUTHENTICATION = "is_header_authentication";
        public const string COLUMN_API_IS_OPENID_AUTHENTICATION = "is_openid_authentication";
        public const string COLUMN_API_IS_ADMIN_AUTHENTICATION = "is_admin_authentication";
        public const string COLUMN_API_IS_OVER_PARTITION = "is_over_partition";
        public const string COLUMN_API_GATEWAY_URL = "gateway_url";
        public const string COLUMN_API_GATEWAY_CREDENTIAL_USERNAME = "gateway_credential_username";
        public const string COLUMN_API_GATEWAY_CREDENTIAL_PASSWORD = "gateway_credential_password";
        public const string COLUMN_API_IS_HIDDEN = "is_hidden";
        public const string COLUMN_API_SCRIPT = "script";
        public const string COLUMN_API_ACTION_TYPE_CD = "action_type_cd";
        public const string COLUMN_API_SCRIPT_TYPE_CD = "script_type_cd";
        public const string COLUMN_API_IS_CACHE = "is_cache";
        public const string COLUMN_API_CACHE_MINUTE = "cache_minute";
        public const string COLUMN_API_CACHE_KEY = "cache_key";
        public const string COLUMN_API_IS_ACCESSKEY = "is_accesskey";
        public const string COLUMN_API_IS_AUTOMATIC_ID = "is_automatic_id";
        public const string COLUMN_API_ACTIONTYPE_VERSION = "actiontype_version";
        public const string COLUMN_API_PARTITION_KEY = "partition_key";
        public const string COLUMN_API_GATEWAY_RELAY_HEADER = "gateway_relay_header";
        public const string COLUMN_API_REG_DATE = "reg_date";
        public const string COLUMN_API_REG_USERNAME = "reg_username";
        public const string COLUMN_API_UPD_DATE = "upd_date";
        public const string COLUMN_API_UPD_USERNAME = "upd_username";
        public const string COLUMN_API_IS_ACTIVE = "is_active";
        public const string COLUMN_API_IS_TRANSPARENT_API = "is_transparent_api";
        public const string COLUMN_API_IS_VENDOR_SYSTEM_AUTHENTICATION_ALLOW_NULL = "is_vendor_system_authentication_allow_null";
        public const string COLUMN_API_IS_VISIBLE_SIGNINUSER_ONLY = "is_visible_signinuser_only";
        public const string COLUMN_API_QUERY_TYPE_CD = "query_type_cd";
        public const string COLUMN_API_IS_SKIP_JSONSCHEMA_VALIDATION = "is_skip_jsonschema_validation";
        public const string COLUMN_API_IS_INTERNAL_CALL_ONLY = "is_internal_call_only";
        public const string COLUMN_API_INTERNAL_CALL_KEYWORD = "internal_call_keyword";
        public const string COLUMN_API_IS_OPENID_AUTHENTICATION_ALLOW_NULL = "is_openid_authentication_allow_null";
        public const string COLUMN_API_IS_CLIENTCERT_AUTHENTICATION = "is_clientcert_authentication";
        public const string COLUMN_API_IS_OTHERRESOURCE_SQLACCESS = "is_otherresource_sqlaccess";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_RESOURCE_SHARING_PERSON_RULE_ID = "resource_sharing_person_rule_id";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_RESOURCE_SHARING_RULE_NAME = "resource_sharing_rule_name";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_RESOURCE_PATH = "resource_path";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_FROM_USER_ID = "sharing_from_user_id";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_FROM_MAIL_ADDRESS = "sharing_from_mail_address";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_TO_USER_ID = "sharing_to_user_id";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_TO_MAIL_ADDRESS = "sharing_to_mail_address";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_QUERY = "query";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SCRIPT = "script";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_IS_ENABLE = "is_enable";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_REG_DATE = "reg_date";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_REG_USERNAME = "reg_username";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_UPD_DATE = "upd_date";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_UPD_USERNAME = "upd_username";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_IS_ACTIVE = "is_active";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_TO_VENDOR_ID = "sharing_to_vendor_id";
        public const string COLUMN_RESOURCESHARINGPERSONRULE_SHARING_TO_SYSTEM_ID = "sharing_to_system_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_CONTAINER_DYNAMIC_SEPARATION_ID = "container_dynamic_separation_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_PHYSICAL_REPOSITORY_ID = "physical_repository_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_VENDOR_ID = "vendor_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_SYSTEM_ID = "system_id";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_CONTAINER_NAME = "container_name";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_REG_DATE = "reg_date";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_UPD_DATE = "upd_date";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTAINERDYNAMICSEPARATION_OPEN_ID = "open_id";
        public const string COLUMN_APIACCESSVENDOR_API_ACCESS_VENDOR_ID = "api_access_vendor_id";
        public const string COLUMN_APIACCESSVENDOR_API_ID = "api_id";
        public const string COLUMN_APIACCESSVENDOR_VENDOR_ID = "vendor_id";
        public const string COLUMN_APIACCESSVENDOR_SYSTEM_ID = "system_id";
        public const string COLUMN_APIACCESSVENDOR_IS_ENABLE = "is_enable";
        public const string COLUMN_APIACCESSVENDOR_ACCESS_KEY = "access_key";
        public const string COLUMN_APIACCESSVENDOR_REG_DATE = "reg_date";
        public const string COLUMN_APIACCESSVENDOR_REG_USERNAME = "reg_username";
        public const string COLUMN_APIACCESSVENDOR_UPD_DATE = "upd_date";
        public const string COLUMN_APIACCESSVENDOR_UPD_USERNAME = "upd_username";
        public const string COLUMN_APIACCESSVENDOR_IS_ACTIVE = "is_active";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_API_COMBINATION_CONSTRAINT_ID = "api_combination_constraint_id";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_REPOSITORY_TYPE_CD = "repository_type_cd";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_ACTION_TYPE_CD = "action_type_cd";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_HTTP_METHOD_TYPE_CODE = "http_method_type_code";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_IS_EXCUSE = "is_excuse";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_REG_DATE = "reg_date";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_REG_USERNAME = "reg_username";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_UPD_DATE = "upd_date";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_UPD_USERNAME = "upd_username";
        public const string COLUMN_APICOMBINATIONCONSTRAINTS_IS_ACTIVE = "is_active";
        public const string COLUMN_APIIPFILTER_API_IP_FILTER_ID = "api_ip_filter_id";
        public const string COLUMN_APIIPFILTER_API_ID = "api_id";
        public const string COLUMN_APIIPFILTER_IP_ADDRESS = "ip_address";
        public const string COLUMN_APIIPFILTER_IS_ENABLE = "is_enable";
        public const string COLUMN_APIIPFILTER_REG_DATE = "reg_date";
        public const string COLUMN_APIIPFILTER_REG_USERNAME = "reg_username";
        public const string COLUMN_APIIPFILTER_UPD_DATE = "upd_date";
        public const string COLUMN_APIIPFILTER_UPD_USERNAME = "upd_username";
        public const string COLUMN_APIIPFILTER_IS_ACTIVE = "is_active";
        public const string COLUMN_QUERYTYPE_QUERY_TYPE_CD = "query_type_cd";
        public const string COLUMN_QUERYTYPE_QUERY_TYPE_NAME = "query_type_name";
        public const string COLUMN_QUERYTYPE_REG_DATE = "reg_date";
        public const string COLUMN_QUERYTYPE_REG_USER_NAME = "reg_user_name";
        public const string COLUMN_QUERYTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_QUERYTYPE_UPD_USER_NAME = "upd_user_name";
        public const string COLUMN_QUERYTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_QUERYTYPE_SORT_NO = "sort_no";
        public const string COLUMN_APILINK_API_LINK_ID = "api_link_id";
        public const string COLUMN_APILINK_API_ID = "api_id";
        public const string COLUMN_APILINK_URL = "url";
        public const string COLUMN_APILINK_TITLE = "title";
        public const string COLUMN_APILINK_DETAIL = "detail";
        public const string COLUMN_APILINK_IS_VISIBLE = "is_visible";
        public const string COLUMN_APILINK_REG_DATE = "reg_date";
        public const string COLUMN_APILINK_REG_USERNAME = "reg_username";
        public const string COLUMN_APILINK_UPD_DATE = "upd_date";
        public const string COLUMN_APILINK_UPD_USERNAME = "upd_username";
        public const string COLUMN_APILINK_IS_ACTIVE = "is_active";
        public const string COLUMN_APIOPENIDCA_API_OPENID_CA_ID = "api_openid_ca_id";
        public const string COLUMN_APIOPENIDCA_API_ID = "api_id";
        public const string COLUMN_APIOPENIDCA_APPLICATION_ID = "application_id";
        public const string COLUMN_APIOPENIDCA_REG_DATE = "reg_date";
        public const string COLUMN_APIOPENIDCA_REG_USERNAME = "reg_username";
        public const string COLUMN_APIOPENIDCA_UPD_DATE = "upd_date";
        public const string COLUMN_APIOPENIDCA_UPD_USERNAME = "upd_username";
        public const string COLUMN_APIOPENIDCA_IS_ACTIVE = "is_active";
        public const string COLUMN_APIOPENIDCA_ACCESS_CONTROL = "access_control";
        public const string COLUMN_CATEGORY_CATEGORY_ID = "category_id";
        public const string COLUMN_CATEGORY_CATEGORY_NAME = "category_name";
        public const string COLUMN_CATEGORY_REG_DATE = "reg_date";
        public const string COLUMN_CATEGORY_REG_USERNAME = "reg_username";
        public const string COLUMN_CATEGORY_UPD_DATE = "upd_date";
        public const string COLUMN_CATEGORY_UPD_USERNAME = "upd_username";
        public const string COLUMN_CATEGORY_IS_ACTIVE = "is_active";
        public const string COLUMN_CATEGORY_SORT_ORDER = "sort_order";
        public const string COLUMN_COMMONIPFILTER_COMMON_IP_FILTER_ID = "common_ip_filter_id";
        public const string COLUMN_COMMONIPFILTER_IP_ADDRESS = "ip_address";
        public const string COLUMN_COMMONIPFILTER_IS_ENABLE = "is_enable";
        public const string COLUMN_COMMONIPFILTER_REG_DATE = "reg_date";
        public const string COLUMN_COMMONIPFILTER_REG_USERNAME = "reg_username";
        public const string COLUMN_COMMONIPFILTER_UPD_DATE = "upd_date";
        public const string COLUMN_COMMONIPFILTER_UPD_USERNAME = "upd_username";
        public const string COLUMN_COMMONIPFILTER_IS_ACTIVE = "is_active";
        public const string COLUMN_COMMONIPFILTER_COMMON_IP_FILTER_GROUP_ID = "common_ip_filter_group_id";
        public const string COLUMN_COMMONIPFILTERGROUP_COMMON_IP_FILTER_GROUP_ID = "common_ip_filter_group_id";
        public const string COLUMN_COMMONIPFILTERGROUP_COMMON_IP_FILTER_GROUP_NAME = "common_ip_filter_group_name";
        public const string COLUMN_COMMONIPFILTERGROUP_REG_DATE = "reg_date";
        public const string COLUMN_COMMONIPFILTERGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_COMMONIPFILTERGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_COMMONIPFILTERGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_COMMONIPFILTERGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_DUMMY_ID = "id";
        public const string COLUMN_DUMMY_TARGETDATE = "TargetDate";
        public const string COLUMN_CONTROLLER_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLER_URL = "url";
        public const string COLUMN_CONTROLLER_CONTROLLER_DESCRIPTION = "controller_description";
        public const string COLUMN_CONTROLLER_VENDOR_ID = "vendor_id";
        public const string COLUMN_CONTROLLER_SYSTEM_ID = "system_id";
        public const string COLUMN_CONTROLLER_IS_STATIC_API = "is_static_api";
        public const string COLUMN_CONTROLLER_IS_VENDOR = "is_vendor";
        public const string COLUMN_CONTROLLER_IS_ENABLE = "is_enable";
        public const string COLUMN_CONTROLLER_IS_TOPPAGE = "is_toppage";
        public const string COLUMN_CONTROLLER_CONTROLLER_SCHEMA_ID = "controller_schema_id";
        public const string COLUMN_CONTROLLER_CONTROLLER_REPOSITORY_KEY = "controller_repository_key";
        public const string COLUMN_CONTROLLER_CONTROLLER_PARTITION_KEY = "controller_partition_key";
        public const string COLUMN_CONTROLLER_CONTROLLER_NAME = "controller_name";
        public const string COLUMN_CONTROLLER_IS_DATA = "is_data";
        public const string COLUMN_CONTROLLER_IS_BUSINESSLOGIC = "is_businesslogic";
        public const string COLUMN_CONTROLLER_IS_PAY = "is_pay";
        public const string COLUMN_CONTROLLER_FEE_DESCRIPTION = "fee_description";
        public const string COLUMN_CONTROLLER_RESOURCE_CREATE_USER = "resource_create_user";
        public const string COLUMN_CONTROLLER_RESOURCE_MAINTAINER = "resource_maintainer";
        public const string COLUMN_CONTROLLER_RESOURCE_CREATE_DATE = "resource_create_date";
        public const string COLUMN_CONTROLLER_RESOURCE_LATEST_DATE = "resource_latest_date";
        public const string COLUMN_CONTROLLER_UPDATE_FREQUENCY = "update_frequency";
        public const string COLUMN_CONTROLLER_IS_CONTRACT = "is_contract";
        public const string COLUMN_CONTROLLER_CONTACT_INFORMATION = "contact_information";
        public const string COLUMN_CONTROLLER_VERSION = "version";
        public const string COLUMN_CONTROLLER_AGREE_DESCRIPTION = "agree_description";
        public const string COLUMN_CONTROLLER_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLER_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLER_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLER_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLER_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLER_IS_PERSON = "is_person";
        public const string COLUMN_CONTROLLER_IS_ENABLE_ATTACHFILE = "is_enable_attachfile";
        public const string COLUMN_CONTROLLER_IS_ENABLE_IPFILTER = "is_enable_ipfilter";
        public const string COLUMN_CONTROLLER_IS_DOCUMENT_HISTORY = "is_document_history";
        public const string COLUMN_CONTROLLER_IS_ENABLE_BLOCKCHAIN = "is_enable_blockchain";
        public const string COLUMN_CONTROLLER_IS_OPTIMISTIC_CONCURRENCY = "is_optimistic_concurrency";
        public const string COLUMN_CONTROLLER_IS_USE_BLOB_CACHE = "is_use_blob_cache";
        public const string COLUMN_CONTROLLER_IS_VISIBLE_AGREEMENT = "is_visible_agreement";
        public const string COLUMN_CONTROLLER_IS_CONTAINER_DYNAMIC_SEPARATION = "is_container_dynamic_separation";
        public const string COLUMN_CONTROLLER_IS_ENABLE_RESOURCE_VERSION = "is_enable_resource_version";
        public const string COLUMN_CONTROLLERCATEGORY_CONTROLLER_CATEGORY_ID = "controller_category_id";
        public const string COLUMN_CONTROLLERCATEGORY_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERCATEGORY_CATEGORY_ID = "category_id";
        public const string COLUMN_CONTROLLERCATEGORY_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERCATEGORY_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERCATEGORY_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERCATEGORY_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERCATEGORY_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDORMAILTEMPLATE_VENDOR_MAIL_TEMPLATE_ID = "vendor_mail_template_id";
        public const string COLUMN_VENDORMAILTEMPLATE_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDORMAILTEMPLATE_MAIL_TEMPLATE_NAME = "mail_template_name";
        public const string COLUMN_VENDORMAILTEMPLATE_FROM_MAILADDRESS = "from_mailaddress";
        public const string COLUMN_VENDORMAILTEMPLATE_TO_MAILADDRESS = "to_mailaddress";
        public const string COLUMN_VENDORMAILTEMPLATE_CC_MAILADDRESS = "cc_mailaddress";
        public const string COLUMN_VENDORMAILTEMPLATE_BCC_MAILADDRESS = "bcc_mailaddress";
        public const string COLUMN_VENDORMAILTEMPLATE_TITLE = "title";
        public const string COLUMN_VENDORMAILTEMPLATE_BODY = "body";
        public const string COLUMN_VENDORMAILTEMPLATE_REG_DATE = "reg_date";
        public const string COLUMN_VENDORMAILTEMPLATE_REG_USERNAME = "reg_username";
        public const string COLUMN_VENDORMAILTEMPLATE_UPD_DATE = "upd_date";
        public const string COLUMN_VENDORMAILTEMPLATE_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDORMAILTEMPLATE_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_COMMON_IP_FILTER_GROUP_ID = "common_ip_filter_group_id";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERCOMMONIPFILTERGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERFIELD_CONTROLLER_FIELD_ID = "controller_field_id";
        public const string COLUMN_CONTROLLERFIELD_FIELD_ID = "field_id";
        public const string COLUMN_CONTROLLERFIELD_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERFIELD_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERFIELD_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERFIELD_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERFIELD_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERFIELD_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERIPFILTER_CONTROLLER_IP_FILTER_ID = "controller_ip_filter_id";
        public const string COLUMN_CONTROLLERIPFILTER_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERIPFILTER_IP_ADDRESS = "ip_address";
        public const string COLUMN_CONTROLLERIPFILTER_IS_ENABLE = "is_enable";
        public const string COLUMN_CONTROLLERIPFILTER_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERIPFILTER_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERIPFILTER_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERIPFILTER_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERIPFILTER_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLEROPENIDCA_CONTROLLER_OPENID_CA_ID = "controller_openid_ca_id";
        public const string COLUMN_CONTROLLEROPENIDCA_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLEROPENIDCA_APPLICATION_ID = "application_id";
        public const string COLUMN_CONTROLLEROPENIDCA_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLEROPENIDCA_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLEROPENIDCA_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLEROPENIDCA_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLEROPENIDCA_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLEROPENIDCA_ACCESS_CONTROL = "access_control";
        public const string COLUMN_CONTROLLERTAG_CONTROLLER_TAG_ID = "controller_tag_id";
        public const string COLUMN_CONTROLLERTAG_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERTAG_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERTAG_TAG_ID = "tag_id";
        public const string COLUMN_CONTROLLERTAG_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERTAG_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERTAG_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERTAG_IS_ACTIVE = "is_active";
        public const string COLUMN_DATASCHEMA_DATA_SCHEMA_ID = "data_schema_id";
        public const string COLUMN_DATASCHEMA_SCHEMA_NAME = "schema_name";
        public const string COLUMN_DATASCHEMA_VENDOR_ID = "vendor_id";
        public const string COLUMN_DATASCHEMA_DATA_SCHEMA = "data_schema";
        public const string COLUMN_DATASCHEMA_SCHEMA_DESCRIPTION = "schema_description";
        public const string COLUMN_DATASCHEMA_REG_DATE = "reg_date";
        public const string COLUMN_DATASCHEMA_REG_USERNAME = "reg_username";
        public const string COLUMN_DATASCHEMA_UPD_DATE = "upd_date";
        public const string COLUMN_DATASCHEMA_UPD_USERNAME = "upd_username";
        public const string COLUMN_DATASCHEMA_IS_ACTIVE = "is_active";
        public const string COLUMN_CERTIFIEDAPPLICATION_CERTIFIED_APPLICATION_ID = "certified_application_id";
        public const string COLUMN_CERTIFIEDAPPLICATION_APPLICATION_NAME = "application_name";
        public const string COLUMN_CERTIFIEDAPPLICATION_VENDOR_ID = "vendor_id";
        public const string COLUMN_CERTIFIEDAPPLICATION_SYSTEM_ID = "system_id";
        public const string COLUMN_CERTIFIEDAPPLICATION_REG_DATE = "reg_date";
        public const string COLUMN_CERTIFIEDAPPLICATION_REG_USERNAME = "reg_username";
        public const string COLUMN_CERTIFIEDAPPLICATION_UPD_DATE = "upd_date";
        public const string COLUMN_CERTIFIEDAPPLICATION_UPD_USERNAME = "upd_username";
        public const string COLUMN_CERTIFIEDAPPLICATION_IS_ACTIVE = "is_active";
        public const string COLUMN_FIELD_FIELD_ID = "field_id";
        public const string COLUMN_FIELD_PARENT_FIELD_ID = "parent_field_id";
        public const string COLUMN_FIELD_FIELD_NAME = "field_name";
        public const string COLUMN_FIELD_REG_DATE = "reg_date";
        public const string COLUMN_FIELD_REG_USERNAME = "reg_username";
        public const string COLUMN_FIELD_UPD_DATE = "upd_date";
        public const string COLUMN_FIELD_UPD_USERNAME = "upd_username";
        public const string COLUMN_FIELD_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_CONTROLLER_RESOURCE_GROUP_ID = "controller_resource_group_id";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_RESOURCE_GROUP_ID = "resource_group_id";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERRESOURCEGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_HTTPMETHODTYPE_HTTP_METHOD_TYPE_CODE = "http_method_type_code";
        public const string COLUMN_HTTPMETHODTYPE_IS_ENABLE = "is_enable";
        public const string COLUMN_HTTPMETHODTYPE_REG_DATE = "reg_date";
        public const string COLUMN_HTTPMETHODTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_HTTPMETHODTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_HTTPMETHODTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_HTTPMETHODTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_HTTPMETHODTYPE_SORT_NO = "sort_no";
        public const string COLUMN_RESOURCEGROUP_RESOURCE_GROUP_ID = "resource_group_id";
        public const string COLUMN_RESOURCEGROUP_RESOURCE_GROUP_NAME = "resource_group_name";
        public const string COLUMN_RESOURCEGROUP_TERM_GROUP_CODE = "term_group_code";
        public const string COLUMN_RESOURCEGROUP_IS_REQUIRE_CONSENT = "is_require_consent";
        public const string COLUMN_RESOURCEGROUP_REG_DATE = "reg_date";
        public const string COLUMN_RESOURCEGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_RESOURCEGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_RESOURCEGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_RESOURCEGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_LANGUAGE_LANGUAGE_ID = "language_id";
        public const string COLUMN_LANGUAGE_LANGUAGE_NAME = "language_name";
        public const string COLUMN_LANGUAGE_ORDER_NO = "order_no";
        public const string COLUMN_LANGUAGE_REG_DATE = "reg_date";
        public const string COLUMN_LANGUAGE_REG_USERNAME = "reg_username";
        public const string COLUMN_LANGUAGE_UPD_DATE = "upd_date";
        public const string COLUMN_LANGUAGE_UPD_USERNAME = "upd_username";
        public const string COLUMN_LANGUAGE_IS_ACTIVE = "is_active";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_APPLICATION_ID = "application_id";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_APPLICATION_NAME = "application_name";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_REG_DATE = "reg_date";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_REG_USERNAME = "reg_username";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_UPD_DATE = "upd_date";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_UPD_USERNAME = "upd_username";
        public const string COLUMN_OPENIDCERTIFICATIONAUTHORITY_IS_ACTIVE = "is_active";
        public const string COLUMN_PHYSICALREPOSITORY_PHYSICAL_REPOSITORY_ID = "physical_repository_id";
        public const string COLUMN_PHYSICALREPOSITORY_REPOSITORY_GROUP_ID = "repository_group_id";
        public const string COLUMN_PHYSICALREPOSITORY_CONNECTION_STRING = "connection_string";
        public const string COLUMN_PHYSICALREPOSITORY_IS_FULL = "is_full";
        public const string COLUMN_PHYSICALREPOSITORY_REG_DATE = "reg_date";
        public const string COLUMN_PHYSICALREPOSITORY_REG_USERNAME = "reg_username";
        public const string COLUMN_PHYSICALREPOSITORY_UPD_DATE = "upd_date";
        public const string COLUMN_PHYSICALREPOSITORY_UPD_USERNAME = "upd_username";
        public const string COLUMN_PHYSICALREPOSITORY_IS_ACTIVE = "is_active";
        public const string COLUMN_PHYSICALREPOSITORY_BLOCKCHAIN_LATEST_DATETIME = "blockchain_latest_datetime";
        public const string COLUMN_RESOURCEGROUPTYPE_RESOURCE_GROUP_TYPE_CODE = "resource_group_type_code";
        public const string COLUMN_RESOURCEGROUPTYPE_RESOURCE_GROUP_TYPE_NAME = "resource_group_type_name";
        public const string COLUMN_RESOURCEGROUPTYPE_REG_DATE = "reg_date";
        public const string COLUMN_RESOURCEGROUPTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_RESOURCEGROUPTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_RESOURCEGROUPTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_RESOURCEGROUPTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_REVOKEHISTORY_REVOKE_HISTORY_ID = "revoke_history_id";
        public const string COLUMN_REVOKEHISTORY_CONTROLLER_ID = "controller_id";
        public const string COLUMN_REVOKEHISTORY_USER_REVOKE_ID = "user_revoke_id";
        public const string COLUMN_REVOKEHISTORY_START_DATE = "start_date";
        public const string COLUMN_REVOKEHISTORY_END_DATE = "end_date";
        public const string COLUMN_REVOKEHISTORY_REG_DATE = "reg_date";
        public const string COLUMN_REVOKEHISTORY_REG_USERNAME = "reg_username";
        public const string COLUMN_REVOKEHISTORY_UPD_DATE = "upd_date";
        public const string COLUMN_REVOKEHISTORY_UPD_USERNAME = "upd_username";
        public const string COLUMN_REVOKEHISTORY_IS_ACTIVE  = "is_active ";
        public const string COLUMN_REPOSITORYGROUP_REPOSITORY_GROUP_ID = "repository_group_id";
        public const string COLUMN_REPOSITORYGROUP_REPOSITORY_GROUP_NAME = "repository_group_name";
        public const string COLUMN_REPOSITORYGROUP_REPOSITORY_TYPE_CD = "repository_type_cd";
        public const string COLUMN_REPOSITORYGROUP_REG_DATE = "reg_date";
        public const string COLUMN_REPOSITORYGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_REPOSITORYGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_REPOSITORYGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_REPOSITORYGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_REPOSITORYGROUP_SORT_NO = "sort_no";
        public const string COLUMN_REPOSITORYGROUP_IS_DEFAULT = "is_default";
        public const string COLUMN_REPOSITORYGROUP_IS_ENABLE = "is_enable";
        public const string COLUMN_TERMS_TERMS_ID = "terms_id";
        public const string COLUMN_TERMS_VERSION_NO = "version_no";
        public const string COLUMN_TERMS_FROM_DATE = "from_date";
        public const string COLUMN_TERMS_TERMS_TEXT = "terms_text";
        public const string COLUMN_TERMS_TERM_GROUP_CODE = "term_group_code";
        public const string COLUMN_TERMS_REG_DATE = "reg_date";
        public const string COLUMN_TERMS_REG_USERNAME = "reg_username";
        public const string COLUMN_TERMS_UPD_DATE = "upd_date";
        public const string COLUMN_TERMS_UPD_USERNAME = "upd_username";
        public const string COLUMN_TERMS_IS_ACTIVE = "is_active";
        public const string COLUMN_TERMSGROUP_TERM_GROUP_CODE = "term_group_code";
        public const string COLUMN_TERMSGROUP_TERM_GROUP_NAME = "term_group_name";
        public const string COLUMN_TERMSGROUP_RESOURCE_GROUP_TYPE_CODE = "resource_group_type_code";
        public const string COLUMN_TERMSGROUP_REG_DATE = "reg_date";
        public const string COLUMN_TERMSGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_TERMSGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_TERMSGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_TERMSGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_REPOSITORYTYPE_REPOSITORY_TYPE_CD = "repository_type_cd";
        public const string COLUMN_REPOSITORYTYPE_REPOSITORY_TYPE_NAME = "repository_type_name";
        public const string COLUMN_REPOSITORYTYPE_REG_DATE = "reg_date";
        public const string COLUMN_REPOSITORYTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_REPOSITORYTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_REPOSITORYTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_REPOSITORYTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_REPOSITORYTYPE_IS_CONTAINER_SEPARATION = "is_container_separation";
        public const string COLUMN_USER_OPEN_ID = "open_id";
        public const string COLUMN_USER_REG_DATE = "reg_date";
        public const string COLUMN_USER_REG_USERNAME = "reg_username";
        public const string COLUMN_USER_UPD_DATE = "upd_date";
        public const string COLUMN_USER_UPD_USERNAME = "upd_username";
        public const string COLUMN_USER_IS_ACRIVE = "is_acrive";
        public const string COLUMN_RESOURCESHARINGRULE_RESOURCE_SHARING_RULE_ID = "resource_sharing_rule_id";
        public const string COLUMN_RESOURCESHARINGRULE_CONTROLLER_ID = "controller_id";
        public const string COLUMN_RESOURCESHARINGRULE_SHARING_FROM_VENDOR_ID = "sharing_from_vendor_id";
        public const string COLUMN_RESOURCESHARINGRULE_SHARING_FROM_SYSTEM_ID = "sharing_from_system_id";
        public const string COLUMN_RESOURCESHARINGRULE_RESOURCE_SHARING_RULE_NAME = "resource_sharing_rule_name";
        public const string COLUMN_RESOURCESHARINGRULE_SHARING_TO_VENDOR_ID = "sharing_to_vendor_id";
        public const string COLUMN_RESOURCESHARINGRULE_SHARING_TO_SYSTEM_ID = "sharing_to_system_id";
        public const string COLUMN_RESOURCESHARINGRULE_QUERY = "query";
        public const string COLUMN_RESOURCESHARINGRULE_ROSLYN_SCRIPT = "roslyn_script";
        public const string COLUMN_RESOURCESHARINGRULE_IS_ENABLE = "is_enable";
        public const string COLUMN_RESOURCESHARINGRULE_REG_DATE = "reg_date";
        public const string COLUMN_RESOURCESHARINGRULE_REG_USERNAME = "reg_username";
        public const string COLUMN_RESOURCESHARINGRULE_UPD_DATE = "upd_date";
        public const string COLUMN_RESOURCESHARINGRULE_UPD_USERNAME = "upd_username";
        public const string COLUMN_RESOURCESHARINGRULE_IS_ACTIVE = "is_active";
        public const string COLUMN_USERGROUP_USER_GROUP_ID = "user_group_id";
        public const string COLUMN_USERGROUP_OPEN_ID = "open_id";
        public const string COLUMN_USERGROUP_REG_DATE = "reg_date";
        public const string COLUMN_USERGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_USERGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_USERGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERGROUP_IS_ACTIVE = "is_active";
        public const string COLUMN_USERGROUPMAP_USER_GROUP_MAP_ID = "user_group_map_id";
        public const string COLUMN_USERGROUPMAP_USER_GROUP_ID = "user_group_id";
        public const string COLUMN_USERGROUPMAP_OPEN_ID = "open_id";
        public const string COLUMN_USERGROUPMAP_REG_DATE = "reg_date";
        public const string COLUMN_USERGROUPMAP_REG_USERNAME = "reg_username";
        public const string COLUMN_USERGROUPMAP_UPD_DATE = "upd_date";
        public const string COLUMN_USERGROUPMAP_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERGROUPMAP_IS_ACTIVE = "is_active";
        public const string COLUMN_SAMPLECODE_SAMPLE_CODE_ID = "sample_code_id";
        public const string COLUMN_SAMPLECODE_LANGUAGE_ID = "language_id";
        public const string COLUMN_SAMPLECODE_API_ID = "api_id";
        public const string COLUMN_SAMPLECODE_CODE = "code";
        public const string COLUMN_SAMPLECODE_REG_DATE = "reg_date";
        public const string COLUMN_SAMPLECODE_REG_USERNAME = "reg_username";
        public const string COLUMN_SAMPLECODE_UPD_DATE = "upd_date";
        public const string COLUMN_SAMPLECODE_UPD_USERNAME = "upd_username";
        public const string COLUMN_SAMPLECODE_IS_ACTIVE = "is_active";
        public const string COLUMN_USERRESOURCESHARE_USER_RESOURCE_GROUP_ID = "user_resource_group_id";
        public const string COLUMN_USERRESOURCESHARE_OPEN_ID = "open_id";
        public const string COLUMN_USERRESOURCESHARE_RESOURCE_GROUP_ID = "resource_group_id";
        public const string COLUMN_USERRESOURCESHARE_USER_SHARED_TYPE_CODE = "user_shared_type_code";
        public const string COLUMN_USERRESOURCESHARE_REG_DATE = "reg_date";
        public const string COLUMN_USERRESOURCESHARE_USER_GROUP_ID = "user_group_id";
        public const string COLUMN_USERRESOURCESHARE_REG_USERNAME = "reg_username";
        public const string COLUMN_USERRESOURCESHARE_UPD_DATE = "upd_date";
        public const string COLUMN_USERRESOURCESHARE_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERRESOURCESHARE_IS_ACTIVE = "is_active";
        public const string COLUMN_SCRIPTTYPE_SCRIPT_TYPE_CD = "script_type_cd";
        public const string COLUMN_SCRIPTTYPE_SCRIPT_TYPE_NAME = "script_type_name";
        public const string COLUMN_SCRIPTTYPE_REG_DATE = "reg_date";
        public const string COLUMN_SCRIPTTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_SCRIPTTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_SCRIPTTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_SCRIPTTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_SCRIPTTYPE_SORT_NO = "sort_no";
        public const string COLUMN_USERREVOKE_USER_REVOKE_ID = "user_revoke_id";
        public const string COLUMN_USERREVOKE_USER_TERMS_ID = "user_terms_id";
        public const string COLUMN_USERREVOKE_TERMS_ID = "terms_id";
        public const string COLUMN_USERREVOKE_IS_FINISHED = "is_finished";
        public const string COLUMN_USERREVOKE_OPEN_ID = "open_id";
        public const string COLUMN_USERREVOKE_REG_DATE = "reg_date";
        public const string COLUMN_USERREVOKE_REG_USERNAME = "reg_username";
        public const string COLUMN_USERREVOKE_UPD_DATE = "upd_date";
        public const string COLUMN_USERREVOKE_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERREVOKE_IS_ACTIVE = "is_active";
        public const string COLUMN_SECONDARYREPOSITORYMAP_SECONDARY_REPOSITORY_MAP_ID = "secondary_repository_map_id";
        public const string COLUMN_SECONDARYREPOSITORYMAP_API_ID = "api_id";
        public const string COLUMN_SECONDARYREPOSITORYMAP_REPOSITORY_GROUP_ID = "repository_group_id";
        public const string COLUMN_SECONDARYREPOSITORYMAP_IS_PRIMARY = "is_primary";
        public const string COLUMN_SECONDARYREPOSITORYMAP_REG_DATE = "reg_date";
        public const string COLUMN_SECONDARYREPOSITORYMAP_REG_USERNAME = "reg_username";
        public const string COLUMN_SECONDARYREPOSITORYMAP_UPD_DATE = "upd_date";
        public const string COLUMN_SECONDARYREPOSITORYMAP_UPD_USERNAME = "upd_username";
        public const string COLUMN_SECONDARYREPOSITORYMAP_IS_ACTIVE = "is_active";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_CONTROLLER_MAIL_TEMPLATE_ID = "controller_mail_template_id";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_CONTROLLER_ID = "controller_id";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_VENDOR_ID = "vendor_id";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_VENDOR_MAIL_TEMPLATE_ID = "vendor_mail_template_id";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_NOTIFY_REGISTER = "notify_register";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_NOTIFY_UPDATE = "notify_update";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_NOTIFY_DELETE = "notify_delete";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_REG_DATE = "reg_date";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_REG_USERNAME = "reg_username";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_UPD_DATE = "upd_date";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_UPD_USERNAME = "upd_username";
        public const string COLUMN_CONTROLLERMAILTEMPLATE_IS_ACTIVE = "is_active";
        public const string COLUMN_SYSTEMLINK_SYSTEM_LINK_ID = "system_link_id";
        public const string COLUMN_SYSTEMLINK_SYSTEM_ID = "system_id";
        public const string COLUMN_SYSTEMLINK_TITLE = "title";
        public const string COLUMN_SYSTEMLINK_DETAIL = "detail";
        public const string COLUMN_SYSTEMLINK_URL = "url";
        public const string COLUMN_SYSTEMLINK_IS_VISIBLE = "is_visible";
        public const string COLUMN_SYSTEMLINK_REG_DATE = "reg_date";
        public const string COLUMN_SYSTEMLINK_REG_USERNAME = "reg_username";
        public const string COLUMN_SYSTEMLINK_UPD_DATE = "upd_date";
        public const string COLUMN_SYSTEMLINK_UPD_USERNAME = "upd_username";
        public const string COLUMN_SYSTEMLINK_IS_ACTIVE = "is_active";
        public const string COLUMN_SYSTEMLINK_IS_DEFAULT = "is_default";
        public const string COLUMN_USERSHAREDTYPE_USER_SHARED_TYPE_CODE = "user_shared_type_code";
        public const string COLUMN_USERSHAREDTYPE_USER_SHARED_TYPE_NAME = "user_shared_type_name";
        public const string COLUMN_USERSHAREDTYPE_REG_DATE = "reg_date";
        public const string COLUMN_USERSHAREDTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_USERSHAREDTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_USERSHAREDTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERSHAREDTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_USERTERMS_USER_TERMS_ID = "user_terms_id";
        public const string COLUMN_USERTERMS_OPEN_ID = "open_id";
        public const string COLUMN_USERTERMS_TERMS_ID = "terms_id";
        public const string COLUMN_USERTERMS_AGREEMENT_DATE = "agreement_date";
        public const string COLUMN_USERTERMS_REVOKE_DATE = "revoke_date";
        public const string COLUMN_USERTERMS_REG_DATE = "reg_date";
        public const string COLUMN_USERTERMS_REG_USERNAME = "reg_username";
        public const string COLUMN_USERTERMS_UPD_DATE = "upd_date";
        public const string COLUMN_USERTERMS_UPD_USERNAME = "upd_username";
        public const string COLUMN_USERTERMS_IS_ACTIVE = "is_active";
        public const string COLUMN_TAG_TAG_ID = "tag_id";
        public const string COLUMN_TAG_TAG_CODE = "tag_code";
        public const string COLUMN_TAG_TAG_CODE2 = "tag_code2";
        public const string COLUMN_TAG_TAG_NAME = "tag_name";
        public const string COLUMN_TAG_PARENT_TAG_ID = "parent_tag_id";
        public const string COLUMN_TAG_TAG_TYPE_ID = "tag_type_id";
        public const string COLUMN_TAG_REG_DATE = "reg_date";
        public const string COLUMN_TAG_REG_USERNAME = "reg_username";
        public const string COLUMN_TAG_UPD_DATE = "upd_date";
        public const string COLUMN_TAG_UPD_USERNAME = "upd_username";
        public const string COLUMN_TAG_IS_ACTIVE = "is_active";
        public const string COLUMN_TAGTYPE_TAG_TYPE_ID = "tag_type_id";
        public const string COLUMN_TAGTYPE_TAG_TYPE_NAME = "tag_type_name";
        public const string COLUMN_TAGTYPE_DETAIL = "detail";
        public const string COLUMN_TAGTYPE_REG_DATE = "reg_date";
        public const string COLUMN_TAGTYPE_REG_USERNAME = "reg_username";
        public const string COLUMN_TAGTYPE_UPD_DATE = "upd_date";
        public const string COLUMN_TAGTYPE_UPD_USERNAME = "upd_username";
        public const string COLUMN_TAGTYPE_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDORLINK_VENDOR_LINK_ID = "vendor_link_id";
        public const string COLUMN_VENDORLINK_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDORLINK_TITLE = "title";
        public const string COLUMN_VENDORLINK_DETAIL = "detail";
        public const string COLUMN_VENDORLINK_URL = "url";
        public const string COLUMN_VENDORLINK_IS_VISIBLE = "is_visible";
        public const string COLUMN_VENDORLINK_REG_DATE = "reg_date";
        public const string COLUMN_VENDORLINK_REG_USERNAME = "reg_username";
        public const string COLUMN_VENDORLINK_UPD_DATE = "upd_date";
        public const string COLUMN_VENDORLINK_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDORLINK_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDORLINK_IS_DEFAULT = "is_default";
        public const string COLUMN_VENDOROPENIDCA_VENDOR_OPENID_CA_ID = "vendor_openid_ca_id";
        public const string COLUMN_VENDOROPENIDCA_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDOROPENIDCA_APPLICATION_ID = "application_id";
        public const string COLUMN_VENDOROPENIDCA_REG_DATE = "reg_date";
        public const string COLUMN_VENDOROPENIDCA_REG_USERNAME = "reg_username";
        public const string COLUMN_VENDOROPENIDCA_UPD_DATE = "upd_date";
        public const string COLUMN_VENDOROPENIDCA_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDOROPENIDCA_IS_ACTIVE = "is_active";
        public const string COLUMN_VENDOROPENIDCA_ACCESS_CONTROL = "access_control";
        public const string COLUMN_VENDORREPOSITORYGROUP_VENDOR_REPOSITORYGROUP_ID = "vendor_repositorygroup_id";
        public const string COLUMN_VENDORREPOSITORYGROUP_VENDOR_ID = "vendor_id";
        public const string COLUMN_VENDORREPOSITORYGROUP_REPOSITORY_GROUP_ID = "repository_group_id";
        public const string COLUMN_VENDORREPOSITORYGROUP_REG_DATE = "reg_date";
        public const string COLUMN_VENDORREPOSITORYGROUP_REG_USERNAME = "reg_username";
        public const string COLUMN_VENDORREPOSITORYGROUP_UPD_DATE = "upd_date";
        public const string COLUMN_VENDORREPOSITORYGROUP_UPD_USERNAME = "upd_username";
        public const string COLUMN_VENDORREPOSITORYGROUP_IS_ACTIVE = "is_active";
    }

    public enum Tables
    {
        ApiMultiLanguage,
        CategoryMultiLanguage,
        ControllerMultiLanguage,
        Staff,
        DataSchemaMultiLanguage,
        FieldMultiLanguage,
        ControllerWebhook,
        Locale,
        SystemMultiLanguage,
        TagMultiLanguage,
        VendorMultiLanguage,
        ApiAccessOpenId,
        CertifiedApplication,
        ControllerResourceGroup,
        ResourceGroup,
        ResourceGroupType,
        RevokeHistory,
        ControllerPricies,
        Const,
        Terms,
        TermsGroup,
        User,
        UserGroup,
        UserGroupMap,
        UserResourceShare,
        UserRevoke,
        UserSharedType,
        UserTerms,
        VendorControllerAgreement,
        System,
        ActionType,
        Vendor,
        Api,
        ResourceSharingPersonRule,
        ContainerDynamicSeparation,
        ApiAccessVendor,
        ApiCombinationConstraints,
        ApiIpFilter,
        QueryType,
        ApiLink,
        ApiOpenIdCA,
        Category,
        CommonIpFilter,
        CommonIpFilterGroup,
        Dummy,
        Controller,
        ControllerCategory,
        VendorMailTemplate,
        ControllerCommonIpFilterGroup,
        ControllerField,
        ControllerIpFilter,
        ControllerOpenIdCA,
        ControllerTag,
        DataSchema,
        CertifiedApplication,
        Field,
        ControllerResourceGroup,
        HttpMethodType,
        ResourceGroup,
        Language,
        OpenIdCertificationAuthority,
        PhysicalRepository,
        ResourceGroupType,
        RevokeHistory,
        RepositoryGroup,
        Terms,
        TermsGroup,
        RepositoryType,
        User,
        ResourceSharingRule,
        UserGroup,
        UserGroupMap,
        SampleCode,
        UserResourceShare,
        ScriptType,
        UserRevoke,
        SecondaryRepositoryMap,
        ControllerMailTemplate,
        SystemLink,
        UserSharedType,
        UserTerms,
        Tag,
        TagType,
        VendorLink,
        VendorOpenIdCA,
        VendorRepositoryGroup,
    }

    public enum DynamicApiApiMultiLanguage
    {
        [DbMap("DynamicApi","ApiMultiLanguage","api_lang_id")]
        api_lang_id,
        [DbMap("DynamicApi","ApiMultiLanguage","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","ApiMultiLanguage","api_description")]
        api_description,
        [DbMap("DynamicApi","ApiMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiCategoryMultiLanguage
    {
        [DbMap("DynamicApi","CategoryMultiLanguage","category_lang_id")]
        category_lang_id,
        [DbMap("DynamicApi","CategoryMultiLanguage","category_id")]
        category_id,
        [DbMap("DynamicApi","CategoryMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","CategoryMultiLanguage","category_name")]
        category_name,
        [DbMap("DynamicApi","CategoryMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","CategoryMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","CategoryMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","CategoryMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","CategoryMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiControllerMultiLanguage
    {
        [DbMap("DynamicApi","ControllerMultiLanguage","controller_lang_id")]
        controller_lang_id,
        [DbMap("DynamicApi","ControllerMultiLanguage","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerMultiLanguage","controller_description")]
        controller_description,
        [DbMap("DynamicApi","ControllerMultiLanguage","controller_name")]
        controller_name,
        [DbMap("DynamicApi","ControllerMultiLanguage","fee_description")]
        fee_description,
        [DbMap("DynamicApi","ControllerMultiLanguage","resource_create_user")]
        resource_create_user,
        [DbMap("DynamicApi","ControllerMultiLanguage","resource_maintainer")]
        resource_maintainer,
        [DbMap("DynamicApi","ControllerMultiLanguage","update_frequency")]
        update_frequency,
        [DbMap("DynamicApi","ControllerMultiLanguage","contact_information")]
        contact_information,
        [DbMap("DynamicApi","ControllerMultiLanguage","version")]
        version,
        [DbMap("DynamicApi","ControllerMultiLanguage","agree_description")]
        agree_description,
        [DbMap("DynamicApi","ControllerMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","ControllerMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiStaff
    {
        [DbMap("DynamicApi","Staff","staff_id")]
        staff_id,
        [DbMap("DynamicApi","Staff","account")]
        account,
        [DbMap("DynamicApi","Staff","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","Staff","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Staff","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Staff","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Staff","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Staff","is_active")]
        is_active,
        [DbMap("DynamicApi","Staff","email_address")]
        email_address,
    }
    public enum DynamicApiDataSchemaMultiLanguage
    {
        [DbMap("DynamicApi","DataSchemaMultiLanguage","data_schema_lang_id")]
        data_schema_lang_id,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","data_schema_id")]
        data_schema_id,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","schema_description")]
        schema_description,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","DataSchemaMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiFieldMultiLanguage
    {
        [DbMap("DynamicApi","FieldMultiLanguage","field_lang_id")]
        field_lang_id,
        [DbMap("DynamicApi","FieldMultiLanguage","field_id")]
        field_id,
        [DbMap("DynamicApi","FieldMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","FieldMultiLanguage","field_name")]
        field_name,
        [DbMap("DynamicApi","FieldMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","FieldMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","FieldMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","FieldMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","FieldMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiControllerWebhook
    {
        [DbMap("DynamicApi","ControllerWebhook","controller_webhook_id")]
        controller_webhook_id,
        [DbMap("DynamicApi","ControllerWebhook","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerWebhook","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","ControllerWebhook","url")]
        url,
        [DbMap("DynamicApi","ControllerWebhook","headers")]
        headers,
        [DbMap("DynamicApi","ControllerWebhook","notify_register")]
        notify_register,
        [DbMap("DynamicApi","ControllerWebhook","notify_update")]
        notify_update,
        [DbMap("DynamicApi","ControllerWebhook","notify_delete")]
        notify_delete,
        [DbMap("DynamicApi","ControllerWebhook","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerWebhook","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerWebhook","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerWebhook","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerWebhook","is_active")]
        is_active,
    }
    public enum DynamicApiLocale
    {
        [DbMap("DynamicApi","Locale","locale_code")]
        locale_code,
        [DbMap("DynamicApi","Locale","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Locale","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Locale","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Locale","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Locale","is_active")]
        is_active,
    }
    public enum DynamicApiSystemMultiLanguage
    {
        [DbMap("DynamicApi","SystemMultiLanguage","system_lang_id")]
        system_lang_id,
        [DbMap("DynamicApi","SystemMultiLanguage","system_id")]
        system_id,
        [DbMap("DynamicApi","SystemMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","SystemMultiLanguage","system_name")]
        system_name,
        [DbMap("DynamicApi","SystemMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","SystemMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","SystemMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiTagMultiLanguage
    {
        [DbMap("DynamicApi","TagMultiLanguage","tag_lang_id")]
        tag_lang_id,
        [DbMap("DynamicApi","TagMultiLanguage","tag_id")]
        tag_id,
        [DbMap("DynamicApi","TagMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","TagMultiLanguage","tag_name")]
        tag_name,
        [DbMap("DynamicApi","TagMultiLanguage","reg_date")]
        reg_date,
        [DbMap("DynamicApi","TagMultiLanguage","reg_username")]
        reg_username,
        [DbMap("DynamicApi","TagMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","TagMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","TagMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiVendorMultiLanguage
    {
        [DbMap("DynamicApi","VendorMultiLanguage","vendor_lang_id")]
        vendor_lang_id,
        [DbMap("DynamicApi","VendorMultiLanguage","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorMultiLanguage","locale_code")]
        locale_code,
        [DbMap("DynamicApi","VendorMultiLanguage","vendor_name")]
        vendor_name,
        [DbMap("DynamicApi","VendorMultiLanguage","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorMultiLanguage","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorMultiLanguage","is_active")]
        is_active,
    }
    public enum DynamicApiApiAccessOpenId
    {
        [DbMap("DynamicApi","ApiAccessOpenId","api_access_openId")]
        api_access_openId,
        [DbMap("DynamicApi","ApiAccessOpenId","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiAccessOpenId","open_id")]
        open_id,
        [DbMap("DynamicApi","ApiAccessOpenId","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ApiAccessOpenId","access_key")]
        access_key,
        [DbMap("DynamicApi","ApiAccessOpenId","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiAccessOpenId","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiAccessOpenId","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiAccessOpenId","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiAccessOpenId","is_active")]
        is_active,
    }
    public enum DynamicApiCertifiedApplication
    {
        [DbMap("DynamicApi","CertifiedApplication","certified_application_id")]
        certified_application_id,
        [DbMap("DynamicApi","CertifiedApplication","application_name")]
        application_name,
        [DbMap("DynamicApi","CertifiedApplication","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","CertifiedApplication","system_id")]
        system_id,
        [DbMap("DynamicApi","CertifiedApplication","reg_date")]
        reg_date,
        [DbMap("DynamicApi","CertifiedApplication","reg_username")]
        reg_username,
        [DbMap("DynamicApi","CertifiedApplication","upd_date")]
        upd_date,
        [DbMap("DynamicApi","CertifiedApplication","upd_username")]
        upd_username,
        [DbMap("DynamicApi","CertifiedApplication","is_active")]
        is_active,
    }
    public enum DynamicApiControllerResourceGroup
    {
        [DbMap("DynamicApi","ControllerResourceGroup","controller_resource_group_id")]
        controller_resource_group_id,
        [DbMap("DynamicApi","ControllerResourceGroup","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","ControllerResourceGroup","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerResourceGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerResourceGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerResourceGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerResourceGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerResourceGroup","is_active")]
        is_active,
    }
    public enum DynamicApiResourceGroup
    {
        [DbMap("DynamicApi","ResourceGroup","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","ResourceGroup","resource_group_name")]
        resource_group_name,
        [DbMap("DynamicApi","ResourceGroup","terms_group_code")]
        terms_group_code,
        [DbMap("DynamicApi","ResourceGroup","is_require_consent")]
        is_require_consent,
        [DbMap("DynamicApi","ResourceGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceGroup","is_active")]
        is_active,
    }
    public enum DynamicApiResourceGroupType
    {
        [DbMap("DynamicApi","ResourceGroupType","resource_group_type_code")]
        resource_group_type_code,
        [DbMap("DynamicApi","ResourceGroupType","resource_group_type_name")]
        resource_group_type_name,
        [DbMap("DynamicApi","ResourceGroupType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceGroupType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceGroupType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceGroupType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceGroupType","is_active")]
        is_active,
    }
    public enum DynamicApiRevokeHistory
    {
        [DbMap("DynamicApi","RevokeHistory","revoke_history_id")]
        revoke_history_id,
        [DbMap("DynamicApi","RevokeHistory","controller_id")]
        controller_id,
        [DbMap("DynamicApi","RevokeHistory","user_revoke_id")]
        user_revoke_id,
        [DbMap("DynamicApi","RevokeHistory","start_date")]
        start_date,
        [DbMap("DynamicApi","RevokeHistory","end_date")]
        end_date,
        [DbMap("DynamicApi","RevokeHistory","reg_date")]
        reg_date,
        [DbMap("DynamicApi","RevokeHistory","reg_username")]
        reg_username,
        [DbMap("DynamicApi","RevokeHistory","upd_date")]
        upd_date,
        [DbMap("DynamicApi","RevokeHistory","upd_username")]
        upd_username,
        [DbMap("DynamicApi","RevokeHistory","is_active ")]
        is_active ,
    }
    public enum DynamicApiControllerPricies
    {
        [DbMap("DynamicApi","ControllerPricies","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerPricies","price_excluding_purchase_tax")]
        price_excluding_purchase_tax,
        [DbMap("DynamicApi","ControllerPricies","price_including_purchase_tax")]
        price_including_purchase_tax,
        [DbMap("DynamicApi","ControllerPricies","price_excluding_sales_tax")]
        price_excluding_sales_tax,
        [DbMap("DynamicApi","ControllerPricies","price_including_sales_tax")]
        price_including_sales_tax,
        [DbMap("DynamicApi","ControllerPricies","switched_datetime")]
        switched_datetime,
        [DbMap("DynamicApi","ControllerPricies","switched_price_excluding_purchase_tax")]
        switched_price_excluding_purchase_tax,
        [DbMap("DynamicApi","ControllerPricies","switched_price_including_purchase_tax")]
        switched_price_including_purchase_tax,
        [DbMap("DynamicApi","ControllerPricies","switched_price_excluding_sales_tax")]
        switched_price_excluding_sales_tax,
        [DbMap("DynamicApi","ControllerPricies","switched_price_including_sales_tax")]
        switched_price_including_sales_tax,
        [DbMap("DynamicApi","ControllerPricies","sales_start_datetime")]
        sales_start_datetime,
        [DbMap("DynamicApi","ControllerPricies","sales_end_datetime")]
        sales_end_datetime,
        [DbMap("DynamicApi","ControllerPricies","public_start_datetime")]
        public_start_datetime,
        [DbMap("DynamicApi","ControllerPricies","public_end_datetime")]
        public_end_datetime,
        [DbMap("DynamicApi","ControllerPricies","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerPricies","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerPricies","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerPricies","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerPricies","is_active")]
        is_active,
    }
    public enum DynamicApiConst
    {
        [DbMap("DynamicApi","Const","const_key")]
        const_key,
        [DbMap("DynamicApi","Const","const_value")]
        const_value,
    }
    public enum DynamicApiTerms
    {
        [DbMap("DynamicApi","Terms","terms_id")]
        terms_id,
        [DbMap("DynamicApi","Terms","version_no")]
        version_no,
        [DbMap("DynamicApi","Terms","from_date")]
        from_date,
        [DbMap("DynamicApi","Terms","terms_text")]
        terms_text,
        [DbMap("DynamicApi","Terms","terms_group_code")]
        terms_group_code,
        [DbMap("DynamicApi","Terms","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Terms","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Terms","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Terms","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Terms","is_active")]
        is_active,
    }
    public enum DynamicApiTermsGroup
    {
        [DbMap("DynamicApi","TermsGroup","terms_group_code")]
        terms_group_code,
        [DbMap("DynamicApi","TermsGroup","terms_group_name")]
        terms_group_name,
        [DbMap("DynamicApi","TermsGroup","resource_group_type_code")]
        resource_group_type_code,
        [DbMap("DynamicApi","TermsGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","TermsGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","TermsGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","TermsGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","TermsGroup","is_active")]
        is_active,
    }
    public enum DynamicApiUser
    {
        [DbMap("DynamicApi","User","open_id")]
        open_id,
        [DbMap("DynamicApi","User","reg_date")]
        reg_date,
        [DbMap("DynamicApi","User","reg_username")]
        reg_username,
        [DbMap("DynamicApi","User","upd_date")]
        upd_date,
        [DbMap("DynamicApi","User","upd_username")]
        upd_username,
        [DbMap("DynamicApi","User","is_acrive")]
        is_acrive,
    }
    public enum DynamicApiUserGroup
    {
        [DbMap("DynamicApi","UserGroup","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserGroup","open_id")]
        open_id,
        [DbMap("DynamicApi","UserGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserGroup","is_active")]
        is_active,
        [DbMap("DynamicApi","UserGroup","user_group_name")]
        user_group_name,
    }
    public enum DynamicApiUserGroupMap
    {
        [DbMap("DynamicApi","UserGroupMap","user_group_map_id")]
        user_group_map_id,
        [DbMap("DynamicApi","UserGroupMap","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserGroupMap","open_id")]
        open_id,
        [DbMap("DynamicApi","UserGroupMap","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserGroupMap","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserGroupMap","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserGroupMap","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserGroupMap","is_active")]
        is_active,
    }
    public enum DynamicApiUserResourceShare
    {
        [DbMap("DynamicApi","UserResourceShare","user_resource_group_id")]
        user_resource_group_id,
        [DbMap("DynamicApi","UserResourceShare","open_id")]
        open_id,
        [DbMap("DynamicApi","UserResourceShare","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","UserResourceShare","user_shared_type_code")]
        user_shared_type_code,
        [DbMap("DynamicApi","UserResourceShare","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserResourceShare","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserResourceShare","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserResourceShare","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserResourceShare","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserResourceShare","is_active")]
        is_active,
    }
    public enum DynamicApiUserRevoke
    {
        [DbMap("DynamicApi","UserRevoke","user_revoke_id")]
        user_revoke_id,
        [DbMap("DynamicApi","UserRevoke","user_terms_id")]
        user_terms_id,
        [DbMap("DynamicApi","UserRevoke","terms_id")]
        terms_id,
        [DbMap("DynamicApi","UserRevoke","is_finished")]
        is_finished,
        [DbMap("DynamicApi","UserRevoke","open_id")]
        open_id,
        [DbMap("DynamicApi","UserRevoke","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserRevoke","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserRevoke","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserRevoke","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserRevoke","is_active")]
        is_active,
        [DbMap("DynamicApi","UserRevoke","start_date")]
        start_date,
        [DbMap("DynamicApi","UserRevoke","end_date")]
        end_date,
    }
    public enum DynamicApiUserSharedType
    {
        [DbMap("DynamicApi","UserSharedType","user_shared_type_code")]
        user_shared_type_code,
        [DbMap("DynamicApi","UserSharedType","user_shared_type_name")]
        user_shared_type_name,
        [DbMap("DynamicApi","UserSharedType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserSharedType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserSharedType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserSharedType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserSharedType","is_active")]
        is_active,
    }
    public enum DynamicApiUserTerms
    {
        [DbMap("DynamicApi","UserTerms","user_terms_id")]
        user_terms_id,
        [DbMap("DynamicApi","UserTerms","open_id")]
        open_id,
        [DbMap("DynamicApi","UserTerms","terms_id")]
        terms_id,
        [DbMap("DynamicApi","UserTerms","agreement_date")]
        agreement_date,
        [DbMap("DynamicApi","UserTerms","revoke_date")]
        revoke_date,
        [DbMap("DynamicApi","UserTerms","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserTerms","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserTerms","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserTerms","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserTerms","is_active")]
        is_active,
    }
    public enum DynamicApiVendorControllerAgreement
    {
        [DbMap("DynamicApi","VendorControllerAgreement","vendor_controller_agreement_id")]
        vendor_controller_agreement_id,
        [DbMap("DynamicApi","VendorControllerAgreement","controller_id")]
        controller_id,
        [DbMap("DynamicApi","VendorControllerAgreement","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorControllerAgreement","agreement_open_id")]
        agreement_open_id,
        [DbMap("DynamicApi","VendorControllerAgreement","agreement_date")]
        agreement_date,
        [DbMap("DynamicApi","VendorControllerAgreement","result")]
        result,
        [DbMap("DynamicApi","VendorControllerAgreement","approval_open_id")]
        approval_open_id,
        [DbMap("DynamicApi","VendorControllerAgreement","result_date")]
        result_date,
        [DbMap("DynamicApi","VendorControllerAgreement","reason")]
        reason,
        [DbMap("DynamicApi","VendorControllerAgreement","reg_date")]
        reg_date,
        [DbMap("DynamicApi","VendorControllerAgreement","reg_username")]
        reg_username,
        [DbMap("DynamicApi","VendorControllerAgreement","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorControllerAgreement","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorControllerAgreement","is_active")]
        is_active,
    }
    public enum DynamicApiSystem
    {
        [DbMap("DynamicApi","System","system_id")]
        system_id,
        [DbMap("DynamicApi","System","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","System","system_name")]
        system_name,
        [DbMap("DynamicApi","System","is_enable")]
        is_enable,
        [DbMap("DynamicApi","System","upd_date")]
        upd_date,
        [DbMap("DynamicApi","System","upd_username")]
        upd_username,
        [DbMap("DynamicApi","System","is_active")]
        is_active,
    }
    public enum DynamicApiActionType
    {
        [DbMap("DynamicApi","ActionType","action_type_cd")]
        action_type_cd,
        [DbMap("DynamicApi","ActionType","action_type_name")]
        action_type_name,
        [DbMap("DynamicApi","ActionType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ActionType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ActionType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ActionType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ActionType","is_active")]
        is_active,
        [DbMap("DynamicApi","ActionType","is_visible")]
        is_visible,
    }
    public enum DynamicApiVendor
    {
        [DbMap("DynamicApi","Vendor","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","Vendor","vendor_name")]
        vendor_name,
        [DbMap("DynamicApi","Vendor","is_enable")]
        is_enable,
        [DbMap("DynamicApi","Vendor","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Vendor","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Vendor","is_active")]
        is_active,
        [DbMap("DynamicApi","Vendor","is_data_use")]
        is_data_use,
        [DbMap("DynamicApi","Vendor","is_data_offer")]
        is_data_offer,
    }
    public enum DynamicApiApi
    {
        [DbMap("DynamicApi","Api","api_id")]
        api_id,
        [DbMap("DynamicApi","Api","api_description")]
        api_description,
        [DbMap("DynamicApi","Api","controller_id")]
        controller_id,
        [DbMap("DynamicApi","Api","method_type")]
        method_type,
        [DbMap("DynamicApi","Api","url")]
        url,
        [DbMap("DynamicApi","Api","repository_key")]
        repository_key,
        [DbMap("DynamicApi","Api","request_schema_id")]
        request_schema_id,
        [DbMap("DynamicApi","Api","response_schema_id")]
        response_schema_id,
        [DbMap("DynamicApi","Api","url_schema_id")]
        url_schema_id,
        [DbMap("DynamicApi","Api","post_data_type")]
        post_data_type,
        [DbMap("DynamicApi","Api","query")]
        query,
        [DbMap("DynamicApi","Api","repository_group_id")]
        repository_group_id,
        [DbMap("DynamicApi","Api","is_enable")]
        is_enable,
        [DbMap("DynamicApi","Api","is_header_authentication")]
        is_header_authentication,
        [DbMap("DynamicApi","Api","is_openid_authentication")]
        is_openid_authentication,
        [DbMap("DynamicApi","Api","is_admin_authentication")]
        is_admin_authentication,
        [DbMap("DynamicApi","Api","is_over_partition")]
        is_over_partition,
        [DbMap("DynamicApi","Api","gateway_url")]
        gateway_url,
        [DbMap("DynamicApi","Api","gateway_credential_username")]
        gateway_credential_username,
        [DbMap("DynamicApi","Api","gateway_credential_password")]
        gateway_credential_password,
        [DbMap("DynamicApi","Api","is_hidden")]
        is_hidden,
        [DbMap("DynamicApi","Api","script")]
        script,
        [DbMap("DynamicApi","Api","action_type_cd")]
        action_type_cd,
        [DbMap("DynamicApi","Api","script_type_cd")]
        script_type_cd,
        [DbMap("DynamicApi","Api","is_cache")]
        is_cache,
        [DbMap("DynamicApi","Api","cache_minute")]
        cache_minute,
        [DbMap("DynamicApi","Api","cache_key")]
        cache_key,
        [DbMap("DynamicApi","Api","is_accesskey")]
        is_accesskey,
        [DbMap("DynamicApi","Api","is_automatic_id")]
        is_automatic_id,
        [DbMap("DynamicApi","Api","actiontype_version")]
        actiontype_version,
        [DbMap("DynamicApi","Api","partition_key")]
        partition_key,
        [DbMap("DynamicApi","Api","gateway_relay_header")]
        gateway_relay_header,
        [DbMap("DynamicApi","Api","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Api","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Api","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Api","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Api","is_active")]
        is_active,
        [DbMap("DynamicApi","Api","is_transparent_api")]
        is_transparent_api,
        [DbMap("DynamicApi","Api","is_vendor_system_authentication_allow_null")]
        is_vendor_system_authentication_allow_null,
        [DbMap("DynamicApi","Api","is_visible_signinuser_only")]
        is_visible_signinuser_only,
        [DbMap("DynamicApi","Api","query_type_cd")]
        query_type_cd,
        [DbMap("DynamicApi","Api","is_skip_jsonschema_validation")]
        is_skip_jsonschema_validation,
        [DbMap("DynamicApi","Api","is_internal_call_only")]
        is_internal_call_only,
        [DbMap("DynamicApi","Api","internal_call_keyword")]
        internal_call_keyword,
        [DbMap("DynamicApi","Api","is_openid_authentication_allow_null")]
        is_openid_authentication_allow_null,
        [DbMap("DynamicApi","Api","is_clientcert_authentication")]
        is_clientcert_authentication,
        [DbMap("DynamicApi","Api","is_otherresource_sqlaccess")]
        is_otherresource_sqlaccess,
    }
    public enum DynamicApiResourceSharingPersonRule
    {
        [DbMap("DynamicApi","ResourceSharingPersonRule","resource_sharing_person_rule_id")]
        resource_sharing_person_rule_id,
        [DbMap("DynamicApi","ResourceSharingPersonRule","resource_sharing_rule_name")]
        resource_sharing_rule_name,
        [DbMap("DynamicApi","ResourceSharingPersonRule","resource_path")]
        resource_path,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_from_user_id")]
        sharing_from_user_id,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_from_mail_address")]
        sharing_from_mail_address,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_to_user_id")]
        sharing_to_user_id,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_to_mail_address")]
        sharing_to_mail_address,
        [DbMap("DynamicApi","ResourceSharingPersonRule","query")]
        query,
        [DbMap("DynamicApi","ResourceSharingPersonRule","script")]
        script,
        [DbMap("DynamicApi","ResourceSharingPersonRule","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ResourceSharingPersonRule","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceSharingPersonRule","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceSharingPersonRule","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceSharingPersonRule","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceSharingPersonRule","is_active")]
        is_active,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_to_vendor_id")]
        sharing_to_vendor_id,
        [DbMap("DynamicApi","ResourceSharingPersonRule","sharing_to_system_id")]
        sharing_to_system_id,
    }
    public enum DynamicApiContainerDynamicSeparation
    {
        [DbMap("DynamicApi","ContainerDynamicSeparation","container_dynamic_separation_id")]
        container_dynamic_separation_id,
        [DbMap("DynamicApi","ContainerDynamicSeparation","physical_repository_id")]
        physical_repository_id,
        [DbMap("DynamicApi","ContainerDynamicSeparation","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ContainerDynamicSeparation","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","ContainerDynamicSeparation","system_id")]
        system_id,
        [DbMap("DynamicApi","ContainerDynamicSeparation","container_name")]
        container_name,
        [DbMap("DynamicApi","ContainerDynamicSeparation","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ContainerDynamicSeparation","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ContainerDynamicSeparation","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ContainerDynamicSeparation","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ContainerDynamicSeparation","is_active")]
        is_active,
        [DbMap("DynamicApi","ContainerDynamicSeparation","open_id")]
        open_id,
    }
    public enum DynamicApiApiAccessVendor
    {
        [DbMap("DynamicApi","ApiAccessVendor","api_access_vendor_id")]
        api_access_vendor_id,
        [DbMap("DynamicApi","ApiAccessVendor","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiAccessVendor","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","ApiAccessVendor","system_id")]
        system_id,
        [DbMap("DynamicApi","ApiAccessVendor","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ApiAccessVendor","access_key")]
        access_key,
        [DbMap("DynamicApi","ApiAccessVendor","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiAccessVendor","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiAccessVendor","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiAccessVendor","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiAccessVendor","is_active")]
        is_active,
    }
    public enum DynamicApiApiCombinationConstraints
    {
        [DbMap("DynamicApi","ApiCombinationConstraints","api_combination_constraint_id")]
        api_combination_constraint_id,
        [DbMap("DynamicApi","ApiCombinationConstraints","repository_type_cd")]
        repository_type_cd,
        [DbMap("DynamicApi","ApiCombinationConstraints","action_type_cd")]
        action_type_cd,
        [DbMap("DynamicApi","ApiCombinationConstraints","http_method_type_code")]
        http_method_type_code,
        [DbMap("DynamicApi","ApiCombinationConstraints","is_excuse")]
        is_excuse,
        [DbMap("DynamicApi","ApiCombinationConstraints","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiCombinationConstraints","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiCombinationConstraints","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiCombinationConstraints","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiCombinationConstraints","is_active")]
        is_active,
    }
    public enum DynamicApiApiIpFilter
    {
        [DbMap("DynamicApi","ApiIpFilter","api_ip_filter_id")]
        api_ip_filter_id,
        [DbMap("DynamicApi","ApiIpFilter","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiIpFilter","ip_address")]
        ip_address,
        [DbMap("DynamicApi","ApiIpFilter","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ApiIpFilter","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiIpFilter","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiIpFilter","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiIpFilter","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiIpFilter","is_active")]
        is_active,
    }
    public enum DynamicApiQueryType
    {
        [DbMap("DynamicApi","QueryType","query_type_cd")]
        query_type_cd,
        [DbMap("DynamicApi","QueryType","query_type_name")]
        query_type_name,
        [DbMap("DynamicApi","QueryType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","QueryType","reg_user_name")]
        reg_user_name,
        [DbMap("DynamicApi","QueryType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","QueryType","upd_user_name")]
        upd_user_name,
        [DbMap("DynamicApi","QueryType","is_active")]
        is_active,
        [DbMap("DynamicApi","QueryType","sort_no")]
        sort_no,
    }
    public enum DynamicApiApiLink
    {
        [DbMap("DynamicApi","ApiLink","api_link_id")]
        api_link_id,
        [DbMap("DynamicApi","ApiLink","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiLink","url")]
        url,
        [DbMap("DynamicApi","ApiLink","title")]
        title,
        [DbMap("DynamicApi","ApiLink","detail")]
        detail,
        [DbMap("DynamicApi","ApiLink","is_visible")]
        is_visible,
        [DbMap("DynamicApi","ApiLink","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiLink","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiLink","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiLink","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiLink","is_active")]
        is_active,
    }
    public enum DynamicApiApiOpenIdCA
    {
        [DbMap("DynamicApi","ApiOpenIdCA","api_openid_ca_id")]
        api_openid_ca_id,
        [DbMap("DynamicApi","ApiOpenIdCA","api_id")]
        api_id,
        [DbMap("DynamicApi","ApiOpenIdCA","application_id")]
        application_id,
        [DbMap("DynamicApi","ApiOpenIdCA","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ApiOpenIdCA","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ApiOpenIdCA","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ApiOpenIdCA","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ApiOpenIdCA","is_active")]
        is_active,
        [DbMap("DynamicApi","ApiOpenIdCA","access_control")]
        access_control,
    }
    public enum DynamicApiCategory
    {
        [DbMap("DynamicApi","Category","category_id")]
        category_id,
        [DbMap("DynamicApi","Category","category_name")]
        category_name,
        [DbMap("DynamicApi","Category","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Category","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Category","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Category","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Category","is_active")]
        is_active,
        [DbMap("DynamicApi","Category","sort_order")]
        sort_order,
    }
    public enum DynamicApiCommonIpFilter
    {
        [DbMap("DynamicApi","CommonIpFilter","common_ip_filter_id")]
        common_ip_filter_id,
        [DbMap("DynamicApi","CommonIpFilter","ip_address")]
        ip_address,
        [DbMap("DynamicApi","CommonIpFilter","is_enable")]
        is_enable,
        [DbMap("DynamicApi","CommonIpFilter","reg_date")]
        reg_date,
        [DbMap("DynamicApi","CommonIpFilter","reg_username")]
        reg_username,
        [DbMap("DynamicApi","CommonIpFilter","upd_date")]
        upd_date,
        [DbMap("DynamicApi","CommonIpFilter","upd_username")]
        upd_username,
        [DbMap("DynamicApi","CommonIpFilter","is_active")]
        is_active,
        [DbMap("DynamicApi","CommonIpFilter","common_ip_filter_group_id")]
        common_ip_filter_group_id,
    }
    public enum DynamicApiCommonIpFilterGroup
    {
        [DbMap("DynamicApi","CommonIpFilterGroup","common_ip_filter_group_id")]
        common_ip_filter_group_id,
        [DbMap("DynamicApi","CommonIpFilterGroup","common_ip_filter_group_name")]
        common_ip_filter_group_name,
        [DbMap("DynamicApi","CommonIpFilterGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","CommonIpFilterGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","CommonIpFilterGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","CommonIpFilterGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","CommonIpFilterGroup","is_active")]
        is_active,
    }
    public enum DynamicApiDummy
    {
        [DbMap("DynamicApi","Dummy","id")]
        id,
        [DbMap("DynamicApi","Dummy","TargetDate")]
        TargetDate,
    }
    public enum DynamicApiController
    {
        [DbMap("DynamicApi","Controller","controller_id")]
        controller_id,
        [DbMap("DynamicApi","Controller","url")]
        url,
        [DbMap("DynamicApi","Controller","controller_description")]
        controller_description,
        [DbMap("DynamicApi","Controller","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","Controller","system_id")]
        system_id,
        [DbMap("DynamicApi","Controller","is_static_api")]
        is_static_api,
        [DbMap("DynamicApi","Controller","is_vendor")]
        is_vendor,
        [DbMap("DynamicApi","Controller","is_enable")]
        is_enable,
        [DbMap("DynamicApi","Controller","is_toppage")]
        is_toppage,
        [DbMap("DynamicApi","Controller","controller_schema_id")]
        controller_schema_id,
        [DbMap("DynamicApi","Controller","controller_repository_key")]
        controller_repository_key,
        [DbMap("DynamicApi","Controller","controller_partition_key")]
        controller_partition_key,
        [DbMap("DynamicApi","Controller","controller_name")]
        controller_name,
        [DbMap("DynamicApi","Controller","is_data")]
        is_data,
        [DbMap("DynamicApi","Controller","is_businesslogic")]
        is_businesslogic,
        [DbMap("DynamicApi","Controller","is_pay")]
        is_pay,
        [DbMap("DynamicApi","Controller","fee_description")]
        fee_description,
        [DbMap("DynamicApi","Controller","resource_create_user")]
        resource_create_user,
        [DbMap("DynamicApi","Controller","resource_maintainer")]
        resource_maintainer,
        [DbMap("DynamicApi","Controller","resource_create_date")]
        resource_create_date,
        [DbMap("DynamicApi","Controller","resource_latest_date")]
        resource_latest_date,
        [DbMap("DynamicApi","Controller","update_frequency")]
        update_frequency,
        [DbMap("DynamicApi","Controller","is_contract")]
        is_contract,
        [DbMap("DynamicApi","Controller","contact_information")]
        contact_information,
        [DbMap("DynamicApi","Controller","version")]
        version,
        [DbMap("DynamicApi","Controller","agree_description")]
        agree_description,
        [DbMap("DynamicApi","Controller","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Controller","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Controller","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Controller","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Controller","is_active")]
        is_active,
        [DbMap("DynamicApi","Controller","is_person")]
        is_person,
        [DbMap("DynamicApi","Controller","is_enable_attachfile")]
        is_enable_attachfile,
        [DbMap("DynamicApi","Controller","is_enable_ipfilter")]
        is_enable_ipfilter,
        [DbMap("DynamicApi","Controller","is_document_history")]
        is_document_history,
        [DbMap("DynamicApi","Controller","is_enable_blockchain")]
        is_enable_blockchain,
        [DbMap("DynamicApi","Controller","is_optimistic_concurrency")]
        is_optimistic_concurrency,
        [DbMap("DynamicApi","Controller","is_use_blob_cache")]
        is_use_blob_cache,
        [DbMap("DynamicApi","Controller","is_visible_agreement")]
        is_visible_agreement,
        [DbMap("DynamicApi","Controller","is_container_dynamic_separation")]
        is_container_dynamic_separation,
        [DbMap("DynamicApi","Controller","is_enable_resource_version")]
        is_enable_resource_version,
    }
    public enum DynamicApiControllerCategory
    {
        [DbMap("DynamicApi","ControllerCategory","controller_category_id")]
        controller_category_id,
        [DbMap("DynamicApi","ControllerCategory","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerCategory","category_id")]
        category_id,
        [DbMap("DynamicApi","ControllerCategory","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerCategory","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerCategory","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerCategory","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerCategory","is_active")]
        is_active,
    }
    public enum DynamicApiVendorMailTemplate
    {
        [DbMap("DynamicApi","VendorMailTemplate","vendor_mail_template_id")]
        vendor_mail_template_id,
        [DbMap("DynamicApi","VendorMailTemplate","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorMailTemplate","mail_template_name")]
        mail_template_name,
        [DbMap("DynamicApi","VendorMailTemplate","from_mailaddress")]
        from_mailaddress,
        [DbMap("DynamicApi","VendorMailTemplate","to_mailaddress")]
        to_mailaddress,
        [DbMap("DynamicApi","VendorMailTemplate","cc_mailaddress")]
        cc_mailaddress,
        [DbMap("DynamicApi","VendorMailTemplate","bcc_mailaddress")]
        bcc_mailaddress,
        [DbMap("DynamicApi","VendorMailTemplate","title")]
        title,
        [DbMap("DynamicApi","VendorMailTemplate","body")]
        body,
        [DbMap("DynamicApi","VendorMailTemplate","reg_date")]
        reg_date,
        [DbMap("DynamicApi","VendorMailTemplate","reg_username")]
        reg_username,
        [DbMap("DynamicApi","VendorMailTemplate","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorMailTemplate","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorMailTemplate","is_active")]
        is_active,
    }
    public enum DynamicApiControllerCommonIpFilterGroup
    {
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","common_ip_filter_group_id")]
        common_ip_filter_group_id,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerCommonIpFilterGroup","is_active")]
        is_active,
    }
    public enum DynamicApiControllerField
    {
        [DbMap("DynamicApi","ControllerField","controller_field_id")]
        controller_field_id,
        [DbMap("DynamicApi","ControllerField","field_id")]
        field_id,
        [DbMap("DynamicApi","ControllerField","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerField","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerField","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerField","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerField","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerField","is_active")]
        is_active,
    }
    public enum DynamicApiControllerIpFilter
    {
        [DbMap("DynamicApi","ControllerIpFilter","controller_ip_filter_id")]
        controller_ip_filter_id,
        [DbMap("DynamicApi","ControllerIpFilter","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerIpFilter","ip_address")]
        ip_address,
        [DbMap("DynamicApi","ControllerIpFilter","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ControllerIpFilter","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerIpFilter","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerIpFilter","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerIpFilter","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerIpFilter","is_active")]
        is_active,
    }
    public enum DynamicApiControllerOpenIdCA
    {
        [DbMap("DynamicApi","ControllerOpenIdCA","controller_openid_ca_id")]
        controller_openid_ca_id,
        [DbMap("DynamicApi","ControllerOpenIdCA","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerOpenIdCA","application_id")]
        application_id,
        [DbMap("DynamicApi","ControllerOpenIdCA","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerOpenIdCA","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerOpenIdCA","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerOpenIdCA","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerOpenIdCA","is_active")]
        is_active,
        [DbMap("DynamicApi","ControllerOpenIdCA","access_control")]
        access_control,
    }
    public enum DynamicApiControllerTag
    {
        [DbMap("DynamicApi","ControllerTag","controller_tag_id")]
        controller_tag_id,
        [DbMap("DynamicApi","ControllerTag","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerTag","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerTag","tag_id")]
        tag_id,
        [DbMap("DynamicApi","ControllerTag","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerTag","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerTag","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerTag","is_active")]
        is_active,
    }
    public enum DynamicApiDataSchema
    {
        [DbMap("DynamicApi","DataSchema","data_schema_id")]
        data_schema_id,
        [DbMap("DynamicApi","DataSchema","schema_name")]
        schema_name,
        [DbMap("DynamicApi","DataSchema","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","DataSchema","data_schema")]
        data_schema,
        [DbMap("DynamicApi","DataSchema","schema_description")]
        schema_description,
        [DbMap("DynamicApi","DataSchema","reg_date")]
        reg_date,
        [DbMap("DynamicApi","DataSchema","reg_username")]
        reg_username,
        [DbMap("DynamicApi","DataSchema","upd_date")]
        upd_date,
        [DbMap("DynamicApi","DataSchema","upd_username")]
        upd_username,
        [DbMap("DynamicApi","DataSchema","is_active")]
        is_active,
    }
    public enum DynamicApiCertifiedApplication
    {
        [DbMap("DynamicApi","CertifiedApplication","certified_application_id")]
        certified_application_id,
        [DbMap("DynamicApi","CertifiedApplication","application_name")]
        application_name,
        [DbMap("DynamicApi","CertifiedApplication","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","CertifiedApplication","system_id")]
        system_id,
        [DbMap("DynamicApi","CertifiedApplication","reg_date")]
        reg_date,
        [DbMap("DynamicApi","CertifiedApplication","reg_username")]
        reg_username,
        [DbMap("DynamicApi","CertifiedApplication","upd_date")]
        upd_date,
        [DbMap("DynamicApi","CertifiedApplication","upd_username")]
        upd_username,
        [DbMap("DynamicApi","CertifiedApplication","is_active")]
        is_active,
    }
    public enum DynamicApiField
    {
        [DbMap("DynamicApi","Field","field_id")]
        field_id,
        [DbMap("DynamicApi","Field","parent_field_id")]
        parent_field_id,
        [DbMap("DynamicApi","Field","field_name")]
        field_name,
        [DbMap("DynamicApi","Field","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Field","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Field","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Field","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Field","is_active")]
        is_active,
    }
    public enum DynamicApiControllerResourceGroup
    {
        [DbMap("DynamicApi","ControllerResourceGroup","controller_resource_group_id")]
        controller_resource_group_id,
        [DbMap("DynamicApi","ControllerResourceGroup","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","ControllerResourceGroup","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerResourceGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerResourceGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerResourceGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerResourceGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerResourceGroup","is_active")]
        is_active,
    }
    public enum DynamicApiHttpMethodType
    {
        [DbMap("DynamicApi","HttpMethodType","http_method_type_code")]
        http_method_type_code,
        [DbMap("DynamicApi","HttpMethodType","is_enable")]
        is_enable,
        [DbMap("DynamicApi","HttpMethodType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","HttpMethodType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","HttpMethodType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","HttpMethodType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","HttpMethodType","is_active")]
        is_active,
        [DbMap("DynamicApi","HttpMethodType","sort_no")]
        sort_no,
    }
    public enum DynamicApiResourceGroup
    {
        [DbMap("DynamicApi","ResourceGroup","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","ResourceGroup","resource_group_name")]
        resource_group_name,
        [DbMap("DynamicApi","ResourceGroup","term_group_code")]
        term_group_code,
        [DbMap("DynamicApi","ResourceGroup","is_require_consent")]
        is_require_consent,
        [DbMap("DynamicApi","ResourceGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceGroup","is_active")]
        is_active,
    }
    public enum DynamicApiLanguage
    {
        [DbMap("DynamicApi","Language","language_id")]
        language_id,
        [DbMap("DynamicApi","Language","language_name")]
        language_name,
        [DbMap("DynamicApi","Language","order_no")]
        order_no,
        [DbMap("DynamicApi","Language","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Language","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Language","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Language","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Language","is_active")]
        is_active,
    }
    public enum DynamicApiOpenIdCertificationAuthority
    {
        [DbMap("DynamicApi","OpenIdCertificationAuthority","application_id")]
        application_id,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","application_name")]
        application_name,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","reg_date")]
        reg_date,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","reg_username")]
        reg_username,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","upd_date")]
        upd_date,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","upd_username")]
        upd_username,
        [DbMap("DynamicApi","OpenIdCertificationAuthority","is_active")]
        is_active,
    }
    public enum DynamicApiPhysicalRepository
    {
        [DbMap("DynamicApi","PhysicalRepository","physical_repository_id")]
        physical_repository_id,
        [DbMap("DynamicApi","PhysicalRepository","repository_group_id")]
        repository_group_id,
        [DbMap("DynamicApi","PhysicalRepository","connection_string")]
        connection_string,
        [DbMap("DynamicApi","PhysicalRepository","is_full")]
        is_full,
        [DbMap("DynamicApi","PhysicalRepository","reg_date")]
        reg_date,
        [DbMap("DynamicApi","PhysicalRepository","reg_username")]
        reg_username,
        [DbMap("DynamicApi","PhysicalRepository","upd_date")]
        upd_date,
        [DbMap("DynamicApi","PhysicalRepository","upd_username")]
        upd_username,
        [DbMap("DynamicApi","PhysicalRepository","is_active")]
        is_active,
        [DbMap("DynamicApi","PhysicalRepository","blockchain_latest_datetime")]
        blockchain_latest_datetime,
    }
    public enum DynamicApiResourceGroupType
    {
        [DbMap("DynamicApi","ResourceGroupType","resource_group_type_code")]
        resource_group_type_code,
        [DbMap("DynamicApi","ResourceGroupType","resource_group_type_name")]
        resource_group_type_name,
        [DbMap("DynamicApi","ResourceGroupType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceGroupType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceGroupType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceGroupType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceGroupType","is_active")]
        is_active,
    }
    public enum DynamicApiRevokeHistory
    {
        [DbMap("DynamicApi","RevokeHistory","revoke_history_id")]
        revoke_history_id,
        [DbMap("DynamicApi","RevokeHistory","controller_id")]
        controller_id,
        [DbMap("DynamicApi","RevokeHistory","user_revoke_id")]
        user_revoke_id,
        [DbMap("DynamicApi","RevokeHistory","start_date")]
        start_date,
        [DbMap("DynamicApi","RevokeHistory","end_date")]
        end_date,
        [DbMap("DynamicApi","RevokeHistory","reg_date")]
        reg_date,
        [DbMap("DynamicApi","RevokeHistory","reg_username")]
        reg_username,
        [DbMap("DynamicApi","RevokeHistory","upd_date")]
        upd_date,
        [DbMap("DynamicApi","RevokeHistory","upd_username")]
        upd_username,
        [DbMap("DynamicApi","RevokeHistory","is_active ")]
        is_active ,
    }
    public enum DynamicApiRepositoryGroup
    {
        [DbMap("DynamicApi","RepositoryGroup","repository_group_id")]
        repository_group_id,
        [DbMap("DynamicApi","RepositoryGroup","repository_group_name")]
        repository_group_name,
        [DbMap("DynamicApi","RepositoryGroup","repository_type_cd")]
        repository_type_cd,
        [DbMap("DynamicApi","RepositoryGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","RepositoryGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","RepositoryGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","RepositoryGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","RepositoryGroup","is_active")]
        is_active,
        [DbMap("DynamicApi","RepositoryGroup","sort_no")]
        sort_no,
        [DbMap("DynamicApi","RepositoryGroup","is_default")]
        is_default,
        [DbMap("DynamicApi","RepositoryGroup","is_enable")]
        is_enable,
    }
    public enum DynamicApiTerms
    {
        [DbMap("DynamicApi","Terms","terms_id")]
        terms_id,
        [DbMap("DynamicApi","Terms","version_no")]
        version_no,
        [DbMap("DynamicApi","Terms","from_date")]
        from_date,
        [DbMap("DynamicApi","Terms","terms_text")]
        terms_text,
        [DbMap("DynamicApi","Terms","term_group_code")]
        term_group_code,
        [DbMap("DynamicApi","Terms","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Terms","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Terms","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Terms","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Terms","is_active")]
        is_active,
    }
    public enum DynamicApiTermsGroup
    {
        [DbMap("DynamicApi","TermsGroup","term_group_code")]
        term_group_code,
        [DbMap("DynamicApi","TermsGroup","term_group_name")]
        term_group_name,
        [DbMap("DynamicApi","TermsGroup","resource_group_type_code")]
        resource_group_type_code,
        [DbMap("DynamicApi","TermsGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","TermsGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","TermsGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","TermsGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","TermsGroup","is_active")]
        is_active,
    }
    public enum DynamicApiRepositoryType
    {
        [DbMap("DynamicApi","RepositoryType","repository_type_cd")]
        repository_type_cd,
        [DbMap("DynamicApi","RepositoryType","repository_type_name")]
        repository_type_name,
        [DbMap("DynamicApi","RepositoryType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","RepositoryType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","RepositoryType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","RepositoryType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","RepositoryType","is_active")]
        is_active,
        [DbMap("DynamicApi","RepositoryType","is_container_separation")]
        is_container_separation,
    }
    public enum DynamicApiUser
    {
        [DbMap("DynamicApi","User","open_id")]
        open_id,
        [DbMap("DynamicApi","User","reg_date")]
        reg_date,
        [DbMap("DynamicApi","User","reg_username")]
        reg_username,
        [DbMap("DynamicApi","User","upd_date")]
        upd_date,
        [DbMap("DynamicApi","User","upd_username")]
        upd_username,
        [DbMap("DynamicApi","User","is_acrive")]
        is_acrive,
    }
    public enum DynamicApiResourceSharingRule
    {
        [DbMap("DynamicApi","ResourceSharingRule","resource_sharing_rule_id")]
        resource_sharing_rule_id,
        [DbMap("DynamicApi","ResourceSharingRule","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ResourceSharingRule","sharing_from_vendor_id")]
        sharing_from_vendor_id,
        [DbMap("DynamicApi","ResourceSharingRule","sharing_from_system_id")]
        sharing_from_system_id,
        [DbMap("DynamicApi","ResourceSharingRule","resource_sharing_rule_name")]
        resource_sharing_rule_name,
        [DbMap("DynamicApi","ResourceSharingRule","sharing_to_vendor_id")]
        sharing_to_vendor_id,
        [DbMap("DynamicApi","ResourceSharingRule","sharing_to_system_id")]
        sharing_to_system_id,
        [DbMap("DynamicApi","ResourceSharingRule","query")]
        query,
        [DbMap("DynamicApi","ResourceSharingRule","roslyn_script")]
        roslyn_script,
        [DbMap("DynamicApi","ResourceSharingRule","is_enable")]
        is_enable,
        [DbMap("DynamicApi","ResourceSharingRule","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ResourceSharingRule","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ResourceSharingRule","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ResourceSharingRule","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ResourceSharingRule","is_active")]
        is_active,
    }
    public enum DynamicApiUserGroup
    {
        [DbMap("DynamicApi","UserGroup","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserGroup","open_id")]
        open_id,
        [DbMap("DynamicApi","UserGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserGroup","is_active")]
        is_active,
    }
    public enum DynamicApiUserGroupMap
    {
        [DbMap("DynamicApi","UserGroupMap","user_group_map_id")]
        user_group_map_id,
        [DbMap("DynamicApi","UserGroupMap","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserGroupMap","open_id")]
        open_id,
        [DbMap("DynamicApi","UserGroupMap","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserGroupMap","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserGroupMap","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserGroupMap","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserGroupMap","is_active")]
        is_active,
    }
    public enum DynamicApiSampleCode
    {
        [DbMap("DynamicApi","SampleCode","sample_code_id")]
        sample_code_id,
        [DbMap("DynamicApi","SampleCode","language_id")]
        language_id,
        [DbMap("DynamicApi","SampleCode","api_id")]
        api_id,
        [DbMap("DynamicApi","SampleCode","code")]
        code,
        [DbMap("DynamicApi","SampleCode","reg_date")]
        reg_date,
        [DbMap("DynamicApi","SampleCode","reg_username")]
        reg_username,
        [DbMap("DynamicApi","SampleCode","upd_date")]
        upd_date,
        [DbMap("DynamicApi","SampleCode","upd_username")]
        upd_username,
        [DbMap("DynamicApi","SampleCode","is_active")]
        is_active,
    }
    public enum DynamicApiUserResourceShare
    {
        [DbMap("DynamicApi","UserResourceShare","user_resource_group_id")]
        user_resource_group_id,
        [DbMap("DynamicApi","UserResourceShare","open_id")]
        open_id,
        [DbMap("DynamicApi","UserResourceShare","resource_group_id")]
        resource_group_id,
        [DbMap("DynamicApi","UserResourceShare","user_shared_type_code")]
        user_shared_type_code,
        [DbMap("DynamicApi","UserResourceShare","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserResourceShare","user_group_id")]
        user_group_id,
        [DbMap("DynamicApi","UserResourceShare","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserResourceShare","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserResourceShare","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserResourceShare","is_active")]
        is_active,
    }
    public enum DynamicApiScriptType
    {
        [DbMap("DynamicApi","ScriptType","script_type_cd")]
        script_type_cd,
        [DbMap("DynamicApi","ScriptType","script_type_name")]
        script_type_name,
        [DbMap("DynamicApi","ScriptType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ScriptType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ScriptType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ScriptType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ScriptType","is_active")]
        is_active,
        [DbMap("DynamicApi","ScriptType","sort_no")]
        sort_no,
    }
    public enum DynamicApiUserRevoke
    {
        [DbMap("DynamicApi","UserRevoke","user_revoke_id")]
        user_revoke_id,
        [DbMap("DynamicApi","UserRevoke","user_terms_id")]
        user_terms_id,
        [DbMap("DynamicApi","UserRevoke","terms_id")]
        terms_id,
        [DbMap("DynamicApi","UserRevoke","is_finished")]
        is_finished,
        [DbMap("DynamicApi","UserRevoke","open_id")]
        open_id,
        [DbMap("DynamicApi","UserRevoke","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserRevoke","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserRevoke","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserRevoke","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserRevoke","is_active")]
        is_active,
    }
    public enum DynamicApiSecondaryRepositoryMap
    {
        [DbMap("DynamicApi","SecondaryRepositoryMap","secondary_repository_map_id")]
        secondary_repository_map_id,
        [DbMap("DynamicApi","SecondaryRepositoryMap","api_id")]
        api_id,
        [DbMap("DynamicApi","SecondaryRepositoryMap","repository_group_id")]
        repository_group_id,
        [DbMap("DynamicApi","SecondaryRepositoryMap","is_primary")]
        is_primary,
        [DbMap("DynamicApi","SecondaryRepositoryMap","reg_date")]
        reg_date,
        [DbMap("DynamicApi","SecondaryRepositoryMap","reg_username")]
        reg_username,
        [DbMap("DynamicApi","SecondaryRepositoryMap","upd_date")]
        upd_date,
        [DbMap("DynamicApi","SecondaryRepositoryMap","upd_username")]
        upd_username,
        [DbMap("DynamicApi","SecondaryRepositoryMap","is_active")]
        is_active,
    }
    public enum DynamicApiControllerMailTemplate
    {
        [DbMap("DynamicApi","ControllerMailTemplate","controller_mail_template_id")]
        controller_mail_template_id,
        [DbMap("DynamicApi","ControllerMailTemplate","controller_id")]
        controller_id,
        [DbMap("DynamicApi","ControllerMailTemplate","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","ControllerMailTemplate","vendor_mail_template_id")]
        vendor_mail_template_id,
        [DbMap("DynamicApi","ControllerMailTemplate","notify_register")]
        notify_register,
        [DbMap("DynamicApi","ControllerMailTemplate","notify_update")]
        notify_update,
        [DbMap("DynamicApi","ControllerMailTemplate","notify_delete")]
        notify_delete,
        [DbMap("DynamicApi","ControllerMailTemplate","reg_date")]
        reg_date,
        [DbMap("DynamicApi","ControllerMailTemplate","reg_username")]
        reg_username,
        [DbMap("DynamicApi","ControllerMailTemplate","upd_date")]
        upd_date,
        [DbMap("DynamicApi","ControllerMailTemplate","upd_username")]
        upd_username,
        [DbMap("DynamicApi","ControllerMailTemplate","is_active")]
        is_active,
    }
    public enum DynamicApiSystemLink
    {
        [DbMap("DynamicApi","SystemLink","system_link_id")]
        system_link_id,
        [DbMap("DynamicApi","SystemLink","system_id")]
        system_id,
        [DbMap("DynamicApi","SystemLink","title")]
        title,
        [DbMap("DynamicApi","SystemLink","detail")]
        detail,
        [DbMap("DynamicApi","SystemLink","url")]
        url,
        [DbMap("DynamicApi","SystemLink","is_visible")]
        is_visible,
        [DbMap("DynamicApi","SystemLink","reg_date")]
        reg_date,
        [DbMap("DynamicApi","SystemLink","reg_username")]
        reg_username,
        [DbMap("DynamicApi","SystemLink","upd_date")]
        upd_date,
        [DbMap("DynamicApi","SystemLink","upd_username")]
        upd_username,
        [DbMap("DynamicApi","SystemLink","is_active")]
        is_active,
        [DbMap("DynamicApi","SystemLink","is_default")]
        is_default,
    }
    public enum DynamicApiUserSharedType
    {
        [DbMap("DynamicApi","UserSharedType","user_shared_type_code")]
        user_shared_type_code,
        [DbMap("DynamicApi","UserSharedType","user_shared_type_name")]
        user_shared_type_name,
        [DbMap("DynamicApi","UserSharedType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserSharedType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserSharedType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserSharedType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserSharedType","is_active")]
        is_active,
    }
    public enum DynamicApiUserTerms
    {
        [DbMap("DynamicApi","UserTerms","user_terms_id")]
        user_terms_id,
        [DbMap("DynamicApi","UserTerms","open_id")]
        open_id,
        [DbMap("DynamicApi","UserTerms","terms_id")]
        terms_id,
        [DbMap("DynamicApi","UserTerms","agreement_date")]
        agreement_date,
        [DbMap("DynamicApi","UserTerms","revoke_date")]
        revoke_date,
        [DbMap("DynamicApi","UserTerms","reg_date")]
        reg_date,
        [DbMap("DynamicApi","UserTerms","reg_username")]
        reg_username,
        [DbMap("DynamicApi","UserTerms","upd_date")]
        upd_date,
        [DbMap("DynamicApi","UserTerms","upd_username")]
        upd_username,
        [DbMap("DynamicApi","UserTerms","is_active")]
        is_active,
    }
    public enum DynamicApiTag
    {
        [DbMap("DynamicApi","Tag","tag_id")]
        tag_id,
        [DbMap("DynamicApi","Tag","tag_code")]
        tag_code,
        [DbMap("DynamicApi","Tag","tag_code2")]
        tag_code2,
        [DbMap("DynamicApi","Tag","tag_name")]
        tag_name,
        [DbMap("DynamicApi","Tag","parent_tag_id")]
        parent_tag_id,
        [DbMap("DynamicApi","Tag","tag_type_id")]
        tag_type_id,
        [DbMap("DynamicApi","Tag","reg_date")]
        reg_date,
        [DbMap("DynamicApi","Tag","reg_username")]
        reg_username,
        [DbMap("DynamicApi","Tag","upd_date")]
        upd_date,
        [DbMap("DynamicApi","Tag","upd_username")]
        upd_username,
        [DbMap("DynamicApi","Tag","is_active")]
        is_active,
    }
    public enum DynamicApiTagType
    {
        [DbMap("DynamicApi","TagType","tag_type_id")]
        tag_type_id,
        [DbMap("DynamicApi","TagType","tag_type_name")]
        tag_type_name,
        [DbMap("DynamicApi","TagType","detail")]
        detail,
        [DbMap("DynamicApi","TagType","reg_date")]
        reg_date,
        [DbMap("DynamicApi","TagType","reg_username")]
        reg_username,
        [DbMap("DynamicApi","TagType","upd_date")]
        upd_date,
        [DbMap("DynamicApi","TagType","upd_username")]
        upd_username,
        [DbMap("DynamicApi","TagType","is_active")]
        is_active,
    }
    public enum DynamicApiVendorLink
    {
        [DbMap("DynamicApi","VendorLink","vendor_link_id")]
        vendor_link_id,
        [DbMap("DynamicApi","VendorLink","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorLink","title")]
        title,
        [DbMap("DynamicApi","VendorLink","detail")]
        detail,
        [DbMap("DynamicApi","VendorLink","url")]
        url,
        [DbMap("DynamicApi","VendorLink","is_visible")]
        is_visible,
        [DbMap("DynamicApi","VendorLink","reg_date")]
        reg_date,
        [DbMap("DynamicApi","VendorLink","reg_username")]
        reg_username,
        [DbMap("DynamicApi","VendorLink","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorLink","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorLink","is_active")]
        is_active,
        [DbMap("DynamicApi","VendorLink","is_default")]
        is_default,
    }
    public enum DynamicApiVendorOpenIdCA
    {
        [DbMap("DynamicApi","VendorOpenIdCA","vendor_openid_ca_id")]
        vendor_openid_ca_id,
        [DbMap("DynamicApi","VendorOpenIdCA","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorOpenIdCA","application_id")]
        application_id,
        [DbMap("DynamicApi","VendorOpenIdCA","reg_date")]
        reg_date,
        [DbMap("DynamicApi","VendorOpenIdCA","reg_username")]
        reg_username,
        [DbMap("DynamicApi","VendorOpenIdCA","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorOpenIdCA","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorOpenIdCA","is_active")]
        is_active,
        [DbMap("DynamicApi","VendorOpenIdCA","access_control")]
        access_control,
    }
    public enum DynamicApiVendorRepositoryGroup
    {
        [DbMap("DynamicApi","VendorRepositoryGroup","vendor_repositorygroup_id")]
        vendor_repositorygroup_id,
        [DbMap("DynamicApi","VendorRepositoryGroup","vendor_id")]
        vendor_id,
        [DbMap("DynamicApi","VendorRepositoryGroup","repository_group_id")]
        repository_group_id,
        [DbMap("DynamicApi","VendorRepositoryGroup","reg_date")]
        reg_date,
        [DbMap("DynamicApi","VendorRepositoryGroup","reg_username")]
        reg_username,
        [DbMap("DynamicApi","VendorRepositoryGroup","upd_date")]
        upd_date,
        [DbMap("DynamicApi","VendorRepositoryGroup","upd_username")]
        upd_username,
        [DbMap("DynamicApi","VendorRepositoryGroup","is_active")]
        is_active,
    }


    /// <summary>
    /// A class which represents the ApiMultiLanguage table.
    /// </summary>
	[Table("ApiMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string api_description { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Api DB_Api { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the CategoryMultiLanguage table.
    /// </summary>
	[Table("CategoryMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_CategoryMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid category_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid category_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string category_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(256)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Category DB_Category { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerMultiLanguage table.
    /// </summary>
	[Table("ControllerMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(2)]
		public virtual string controller_description { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string controller_name { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(4)]
		public virtual string fee_description { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(5)]
		public virtual string resource_create_user { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(6)]
		public virtual string resource_maintainer { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(7)]
		public virtual string update_frequency { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(8)]
		public virtual string contact_information { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(9)]
		public virtual string version { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(10)]
		public virtual string agree_description { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(11)]
		public virtual string locale_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(12)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(13)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(14)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(15)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(16)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(17)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(18)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the Staff table.
    /// </summary>
	[Table("Staff")]
	[Msgpack.MessagePackObject]
	public partial class DB_Staff
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid staff_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string account { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool? is_active { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(8)]
		public virtual string email_address { get; set; }
	}


    /// <summary>
    /// A class which represents the DataSchemaMultiLanguage table.
    /// </summary>
	[Table("DataSchemaMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_DataSchemaMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid data_schema_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid data_schema_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string schema_description { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_DataSchema DB_DataSchema { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the FieldMultiLanguage table.
    /// </summary>
	[Table("FieldMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_FieldMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid field_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid field_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(50)]
		[Msgpack.Key(3)]
		public virtual string field_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Field DB_Field { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerWebhook table.
    /// </summary>
	[Table("ControllerWebhook")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerWebhook
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_webhook_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(3)]
		public virtual string url { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(4)]
		public virtual string headers { get; set; }
		[Msgpack.Key(5)]
		public virtual bool notify_register { get; set; }
		[Msgpack.Key(6)]
		public virtual bool notify_update { get; set; }
		[Msgpack.Key(7)]
		public virtual bool notify_delete { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(8)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(10)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(11)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(12)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(13)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(14)]
		public virtual DB_Vendor DB_Vendor { get; set; }
	}


    /// <summary>
    /// A class which represents the Locale table.
    /// </summary>
	[Table("Locale")]
	[Msgpack.MessagePackObject]
	public partial class DB_Locale
	{
		[Key]
		[MaxLength(20)]
		[Msgpack.Key(0)]
		public virtual string locale_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(1)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(2)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(6)]
		public virtual IEnumerable<DB_ApiMultiLanguage> ApiMultiLanguage { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_CategoryMultiLanguage> CategoryMultiLanguage { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_ControllerMultiLanguage> ControllerMultiLanguage { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_DataSchemaMultiLanguage> DataSchemaMultiLanguage { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_FieldMultiLanguage> FieldMultiLanguage { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_SystemMultiLanguage> SystemMultiLanguage { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_TagMultiLanguage> TagMultiLanguage { get; set; }
		[Msgpack.Key(13)]
		public virtual IEnumerable<DB_VendorMultiLanguage> VendorMultiLanguage { get; set; }
	}


    /// <summary>
    /// A class which represents the SystemMultiLanguage table.
    /// </summary>
	[Table("SystemMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_SystemMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid system_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid system_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string system_name { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual DB_System DB_System { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the TagMultiLanguage table.
    /// </summary>
	[Table("TagMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_TagMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid tag_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid tag_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string tag_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Tag DB_Tag { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorMultiLanguage table.
    /// </summary>
	[Table("VendorMultiLanguage")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorMultiLanguage
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_lang_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string locale_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string vendor_name { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual DB_Vendor DB_Vendor { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_Locale DB_Locale { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiAccessOpenId table.
    /// </summary>
	[Table("ApiAccessOpenId")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiAccessOpenId
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_access_openId { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid? access_key { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Api DB_Api { get; set; }
	}


    /// <summary>
    /// A class which represents the CertifiedApplication table.
    /// </summary>
	[Table("CertifiedApplication")]
	[Msgpack.MessagePackObject]
	public partial class DB_CertifiedApplication
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid certified_application_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string application_name { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid system_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerResourceGroup table.
    /// </summary>
	[Table("ControllerResourceGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerResourceGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_resource_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? resource_group_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? controller_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_ResourceGroup DB_ResourceGroup { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceGroup table.
    /// </summary>
	[Table("ResourceGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid resource_group_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string resource_group_name { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string terms_group_code { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_require_consent { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_TermsGroup DB_TermsGroup { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_ControllerResourceGroup> ControllerResourceGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceGroupType table.
    /// </summary>
	[Table("ResourceGroupType")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceGroupType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string resource_group_type_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string resource_group_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_TermsGroup> TermsGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the RevokeHistory table.
    /// </summary>
	[Table("RevokeHistory")]
	[Msgpack.MessagePackObject]
	public partial class DB_RevokeHistory
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid revoke_history_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid user_revoke_id { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime? start_date { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? end_date { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool? is_active_ { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_UserRevoke DB_UserRevoke { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerPricies table.
    /// </summary>
	[Table("ControllerPricies")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerPricy
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(1)]
		public virtual decimal price_excluding_purchase_tax { get; set; }
		[Msgpack.Key(2)]
		public virtual decimal price_including_purchase_tax { get; set; }
		[Msgpack.Key(3)]
		public virtual decimal price_excluding_sales_tax { get; set; }
		[Msgpack.Key(4)]
		public virtual decimal price_including_sales_tax { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime switched_datetime { get; set; }
		[Msgpack.Key(6)]
		public virtual decimal switched_price_excluding_purchase_tax { get; set; }
		[Msgpack.Key(7)]
		public virtual decimal switched_price_including_purchase_tax { get; set; }
		[Msgpack.Key(8)]
		public virtual decimal switched_price_excluding_sales_tax { get; set; }
		[Msgpack.Key(9)]
		public virtual decimal switched_price_including_sales_tax { get; set; }
		[Msgpack.Key(10)]
		public virtual DateTime sales_start_datetime { get; set; }
		[Msgpack.Key(11)]
		public virtual DateTime sales_end_datetime { get; set; }
		[Msgpack.Key(12)]
		public virtual DateTime public_start_datetime { get; set; }
		[Msgpack.Key(13)]
		public virtual DateTime public_end_datetime { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(14)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(15)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(16)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(17)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(18)]
		public virtual bool is_active { get; set; }
	}


    /// <summary>
    /// A class which represents the Const table.
    /// </summary>
	[Table("Const")]
	[Msgpack.MessagePackObject]
	public partial class DB_Const
	{
		[Key]
		[MaxLength(100)]
		[Msgpack.Key(0)]
		public virtual string const_key { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(1)]
		public virtual string const_value { get; set; }
	}


    /// <summary>
    /// A class which represents the Terms table.
    /// </summary>
	[Table("Terms")]
	[Msgpack.MessagePackObject]
	public partial class DB_Term
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid terms_id { get; set; }
		[MaxLength(10)]
		[Msgpack.Key(1)]
		public virtual string version_no { get; set; }
		[Msgpack.Key(2)]
		public virtual DateTime from_date { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string terms_text { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(4)]
		public virtual string terms_group_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_TermsGroup DB_TermsGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserRevoke> UserRevoke { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_UserTerm> UserTerms { get; set; }
	}


    /// <summary>
    /// A class which represents the TermsGroup table.
    /// </summary>
	[Table("TermsGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_TermsGroup
	{
		[Key]
		[MaxLength(20)]
		[Msgpack.Key(0)]
		public virtual string terms_group_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string terms_group_name { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(2)]
		public virtual string resource_group_type_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(50)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_ResourceGroupType DB_ResourceGroupType { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ResourceGroup> ResourceGroup { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_Term> Terms { get; set; }
	}


    /// <summary>
    /// A class which represents the User table.
    /// </summary>
	[Table("User")]
	[Msgpack.MessagePackObject]
	public partial class DB_User
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(1)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(2)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_acrive { get; set; }
	}


    /// <summary>
    /// A class which represents the UserGroup table.
    /// </summary>
	[Table("UserGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(7)]
		public virtual string user_group_name { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_UserGroupMap> UserGroupMap { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the UserGroupMap table.
    /// </summary>
	[Table("UserGroupMap")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserGroupMap
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_group_map_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid user_group_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_UserGroup DB_UserGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the UserResourceShare table.
    /// </summary>
	[Table("UserResourceShare")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserResourceShare
	{
		[Msgpack.Key(0)]
		public virtual Guid user_resource_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? resource_group_id { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(3)]
		public virtual string user_shared_type_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid? user_group_id { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_ResourceGroup DB_ResourceGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_UserSharedType DB_UserSharedType { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_UserGroup DB_UserGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the UserRevoke table.
    /// </summary>
	[Table("UserRevoke")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserRevoke
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_revoke_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? user_terms_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? terms_id { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_finished { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid? open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DateTime? start_date { get; set; }
		[Msgpack.Key(11)]
		public virtual DateTime? end_date { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_UserTerm DB_UserTerm { get; set; }
		[Msgpack.Key(13)]
		public virtual DB_Term DB_Term { get; set; }
		[Msgpack.Key(14)]
		public virtual IEnumerable<DB_RevokeHistory> RevokeHistory { get; set; }
	}


    /// <summary>
    /// A class which represents the UserSharedType table.
    /// </summary>
	[Table("UserSharedType")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserSharedType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string user_shared_type_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string user_shared_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the UserTerms table.
    /// </summary>
	[Table("UserTerms")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserTerm
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_terms_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid terms_id { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime agreement_date { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? revoke_date { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Term DB_Term { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserRevoke> UserRevoke { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorControllerAgreement table.
    /// </summary>
	[Table("VendorControllerAgreement")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorControllerAgreement
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_controller_agreement_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid? agreement_open_id { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? agreement_date { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(5)]
		public virtual string result { get; set; }
		[Msgpack.Key(6)]
		public virtual Guid? approval_open_id { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime? result_date { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(8)]
		public virtual string reason { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(9)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(10)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(11)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(12)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(13)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(14)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the System table.
    /// </summary>
	[Table("System")]
	[Msgpack.MessagePackObject]
	public partial class DB_System
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid system_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(2)]
		public virtual string system_name { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_SystemMultiLanguage> SystemMultiLanguage { get; set; }
	}


    /// <summary>
    /// A class which represents the ActionType table.
    /// </summary>
	[Table("ActionType")]
	[Msgpack.MessagePackObject]
	public partial class DB_ActionType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string action_type_cd { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string action_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_visible { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ApiCombinationConstraint> ApiCombinationConstraints { get; set; }
	}


    /// <summary>
    /// A class which represents the Vendor table.
    /// </summary>
	[Table("Vendor")]
	[Msgpack.MessagePackObject]
	public partial class DB_Vendor
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string vendor_name { get; set; }
		[Msgpack.Key(2)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime? upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_data_use { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_data_offer { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_ControllerWebhook> ControllerWebhook { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_VendorMultiLanguage> VendorMultiLanguage { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_VendorMailTemplate> VendorMailTemplate { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_ControllerMailTemplate> ControllerMailTemplate { get; set; }
	}


    /// <summary>
    /// A class which represents the Api table.
    /// </summary>
	[Table("Api")]
	[Msgpack.MessagePackObject]
	public partial class DB_Api
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_id { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(1)]
		public virtual string api_description { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid controller_id { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(3)]
		public virtual string method_type { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(4)]
		public virtual string url { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(5)]
		public virtual string repository_key { get; set; }
		[Msgpack.Key(6)]
		public virtual Guid? request_schema_id { get; set; }
		[Msgpack.Key(7)]
		public virtual Guid? response_schema_id { get; set; }
		[Msgpack.Key(8)]
		public virtual Guid? url_schema_id { get; set; }
		[MaxLength(10)]
		[Msgpack.Key(9)]
		public virtual string post_data_type { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(10)]
		public virtual string query { get; set; }
		[Msgpack.Key(11)]
		public virtual Guid? repository_group_id { get; set; }
		[Msgpack.Key(12)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(13)]
		public virtual bool is_header_authentication { get; set; }
		[Msgpack.Key(14)]
		public virtual bool is_openid_authentication { get; set; }
		[Msgpack.Key(15)]
		public virtual bool is_admin_authentication { get; set; }
		[Msgpack.Key(16)]
		public virtual bool is_over_partition { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(17)]
		public virtual string gateway_url { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(18)]
		public virtual string gateway_credential_username { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(19)]
		public virtual string gateway_credential_password { get; set; }
		[Msgpack.Key(20)]
		public virtual bool is_hidden { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(21)]
		public virtual string script { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(22)]
		public virtual string action_type_cd { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(23)]
		public virtual string script_type_cd { get; set; }
		[Msgpack.Key(24)]
		public virtual bool is_cache { get; set; }
		[Msgpack.Key(25)]
		public virtual decimal cache_minute { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(26)]
		public virtual string cache_key { get; set; }
		[Msgpack.Key(27)]
		public virtual bool is_accesskey { get; set; }
		[Msgpack.Key(28)]
		public virtual bool is_automatic_id { get; set; }
		[Msgpack.Key(29)]
		public virtual int actiontype_version { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(30)]
		public virtual string partition_key { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(31)]
		public virtual string gateway_relay_header { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(32)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(33)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(34)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(35)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(36)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(37)]
		public virtual bool is_transparent_api { get; set; }
		[Msgpack.Key(38)]
		public virtual bool is_vendor_system_authentication_allow_null { get; set; }
		[Msgpack.Key(39)]
		public virtual bool is_visible_signinuser_only { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(40)]
		public virtual string query_type_cd { get; set; }
		[Msgpack.Key(41)]
		public virtual bool is_skip_jsonschema_validation { get; set; }
		[Msgpack.Key(42)]
		public virtual bool is_internal_call_only { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(43)]
		public virtual string internal_call_keyword { get; set; }
		[Msgpack.Key(44)]
		public virtual bool is_openid_authentication_allow_null { get; set; }
		[Msgpack.Key(45)]
		public virtual bool is_clientcert_authentication { get; set; }
		[Msgpack.Key(46)]
		public virtual bool is_otherresource_sqlaccess { get; set; }
		[Msgpack.Key(47)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(48)]
		public virtual DB_HttpMethodType DB_HttpMethodType { get; set; }
		[Msgpack.Key(49)]
		public virtual DB_DataSchema DB_DataSchema { get; set; }
		[Msgpack.Key(50)]
		public virtual DB_RepositoryGroup DB_RepositoryGroup { get; set; }
		[Msgpack.Key(51)]
		public virtual DB_ActionType DB_ActionType { get; set; }
		[Msgpack.Key(52)]
		public virtual DB_ScriptType DB_ScriptType { get; set; }
		[Msgpack.Key(53)]
		public virtual DB_QueryType DB_QueryType { get; set; }
		[Msgpack.Key(54)]
		public virtual IEnumerable<DB_ApiMultiLanguage> ApiMultiLanguage { get; set; }
		[Msgpack.Key(55)]
		public virtual IEnumerable<DB_ApiAccessOpenId> ApiAccessOpenId { get; set; }
		[Msgpack.Key(56)]
		public virtual IEnumerable<DB_ApiAccessVendor> ApiAccessVendor { get; set; }
		[Msgpack.Key(57)]
		public virtual IEnumerable<DB_ApiIpFilter> ApiIpFilter { get; set; }
		[Msgpack.Key(58)]
		public virtual IEnumerable<DB_ApiLink> ApiLink { get; set; }
		[Msgpack.Key(59)]
		public virtual IEnumerable<DB_ApiOpenIdCA> ApiOpenIdCA { get; set; }
		[Msgpack.Key(60)]
		public virtual IEnumerable<DB_SampleCode> SampleCode { get; set; }
		[Msgpack.Key(61)]
		public virtual IEnumerable<DB_SecondaryRepositoryMap> SecondaryRepositoryMap { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceSharingPersonRule table.
    /// </summary>
	[Table("ResourceSharingPersonRule")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceSharingPersonRule
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid resource_sharing_person_rule_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(1)]
		public virtual string resource_sharing_rule_name { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(2)]
		public virtual string resource_path { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid? sharing_from_user_id { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(4)]
		public virtual string sharing_from_mail_address { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid? sharing_to_user_id { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(6)]
		public virtual string sharing_to_mail_address { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(7)]
		public virtual string query { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(8)]
		public virtual string script { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(10)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(11)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(12)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(13)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(14)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(15)]
		public virtual Guid? sharing_to_vendor_id { get; set; }
		[Msgpack.Key(16)]
		public virtual Guid? sharing_to_system_id { get; set; }
	}


    /// <summary>
    /// A class which represents the ContainerDynamicSeparation table.
    /// </summary>
	[Table("ContainerDynamicSeparation")]
	[Msgpack.MessagePackObject]
	public partial class DB_ContainerDynamicSeparation
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid container_dynamic_separation_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid physical_repository_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid system_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(5)]
		public virtual string container_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_PhysicalRepository DB_PhysicalRepository { get; set; }
		[Msgpack.Key(13)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiAccessVendor table.
    /// </summary>
	[Table("ApiAccessVendor")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiAccessVendor
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_access_vendor_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid system_id { get; set; }
		[Msgpack.Key(4)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid? access_key { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_Api DB_Api { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiCombinationConstraints table.
    /// </summary>
	[Table("ApiCombinationConstraints")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiCombinationConstraint
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_combination_constraint_id { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(1)]
		public virtual string repository_type_cd { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(2)]
		public virtual string action_type_cd { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(3)]
		public virtual string http_method_type_code { get; set; }
		[Msgpack.Key(4)]
		public virtual bool is_excuse { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_RepositoryType DB_RepositoryType { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_ActionType DB_ActionType { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_HttpMethodType DB_HttpMethodType { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiIpFilter table.
    /// </summary>
	[Table("ApiIpFilter")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiIpFilter
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_ip_filter_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[MaxLength(32)]
		[Msgpack.Key(2)]
		public virtual string ip_address { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Api DB_Api { get; set; }
	}


    /// <summary>
    /// A class which represents the QueryType table.
    /// </summary>
	[Table("QueryType")]
	[Msgpack.MessagePackObject]
	public partial class DB_QueryType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string query_type_cd { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string query_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_user_name { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_user_name { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual int sort_no { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiLink table.
    /// </summary>
	[Table("ApiLink")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiLink
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_link_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? api_id { get; set; }
		[MaxLength(512)]
		[Msgpack.Key(2)]
		public virtual string url { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string title { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(4)]
		public virtual string detail { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_visible { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_Api DB_Api { get; set; }
	}


    /// <summary>
    /// A class which represents the ApiOpenIdCA table.
    /// </summary>
	[Table("ApiOpenIdCA")]
	[Msgpack.MessagePackObject]
	public partial class DB_ApiOpenIdCA
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid api_openid_ca_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid application_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(8)]
		public virtual string access_control { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Api DB_Api { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_OpenIdCertificationAuthority DB_OpenIdCertificationAuthority { get; set; }
	}


    /// <summary>
    /// A class which represents the Category table.
    /// </summary>
	[Table("Category")]
	[Msgpack.MessagePackObject]
	public partial class DB_Category
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid category_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string category_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(256)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual int sort_order { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_CategoryMultiLanguage> CategoryMultiLanguage { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ControllerCategory> ControllerCategory { get; set; }
	}


    /// <summary>
    /// A class which represents the CommonIpFilter table.
    /// </summary>
	[Table("CommonIpFilter")]
	[Msgpack.MessagePackObject]
	public partial class DB_CommonIpFilter
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid common_ip_filter_id { get; set; }
		[MaxLength(32)]
		[Msgpack.Key(1)]
		public virtual string ip_address { get; set; }
		[Msgpack.Key(2)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual Guid common_ip_filter_group_id { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_CommonIpFilterGroup DB_CommonIpFilterGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the CommonIpFilterGroup table.
    /// </summary>
	[Table("CommonIpFilterGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_CommonIpFilterGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid common_ip_filter_group_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string common_ip_filter_group_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_CommonIpFilter> CommonIpFilter { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_ControllerCommonIpFilterGroup> ControllerCommonIpFilterGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the Dummy table.
    /// </summary>
	[Table("Dummy")]
	[Msgpack.MessagePackObject]
	public partial class DB_Dummy
	{
		[Msgpack.Key(0)]
		public virtual Guid? id { get; set; }
		[Msgpack.Key(1)]
		public virtual DateTime? TargetDate { get; set; }
	}


    /// <summary>
    /// A class which represents the Controller table.
    /// </summary>
	[Table("Controller")]
	[Msgpack.MessagePackObject]
	public partial class DB_Controller
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_id { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(1)]
		public virtual string url { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(2)]
		public virtual string controller_description { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid system_id { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_static_api { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_vendor { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_toppage { get; set; }
		[Msgpack.Key(9)]
		public virtual Guid? controller_schema_id { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(10)]
		public virtual string controller_repository_key { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(11)]
		public virtual string controller_partition_key { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(12)]
		public virtual string controller_name { get; set; }
		[Msgpack.Key(13)]
		public virtual bool is_data { get; set; }
		[Msgpack.Key(14)]
		public virtual bool is_businesslogic { get; set; }
		[Msgpack.Key(15)]
		public virtual bool is_pay { get; set; }
		[MaxLength(500)]
		[Msgpack.Key(16)]
		public virtual string fee_description { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(17)]
		public virtual string resource_create_user { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(18)]
		public virtual string resource_maintainer { get; set; }
		[Msgpack.Key(19)]
		public virtual DateTime? resource_create_date { get; set; }
		[Msgpack.Key(20)]
		public virtual DateTime? resource_latest_date { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(21)]
		public virtual string update_frequency { get; set; }
		[Msgpack.Key(22)]
		public virtual bool is_contract { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(23)]
		public virtual string contact_information { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(24)]
		public virtual string version { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(25)]
		public virtual string agree_description { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(26)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(27)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(28)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(29)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(30)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(31)]
		public virtual bool is_person { get; set; }
		[Msgpack.Key(32)]
		public virtual bool is_enable_attachfile { get; set; }
		[Msgpack.Key(33)]
		public virtual bool is_enable_ipfilter { get; set; }
		[Msgpack.Key(34)]
		public virtual bool is_document_history { get; set; }
		[Msgpack.Key(35)]
		public virtual bool is_enable_blockchain { get; set; }
		[Msgpack.Key(36)]
		public virtual bool is_optimistic_concurrency { get; set; }
		[Msgpack.Key(37)]
		public virtual bool is_use_blob_cache { get; set; }
		[Msgpack.Key(38)]
		public virtual bool is_visible_agreement { get; set; }
		[Msgpack.Key(39)]
		public virtual bool is_container_dynamic_separation { get; set; }
		[Msgpack.Key(40)]
		public virtual bool is_enable_resource_version { get; set; }
		[Msgpack.Key(41)]
		public virtual DB_DataSchema DB_DataSchema { get; set; }
		[Msgpack.Key(42)]
		public virtual IEnumerable<DB_ControllerResourceGroup> ControllerResourceGroup { get; set; }
		[Msgpack.Key(43)]
		public virtual IEnumerable<DB_ControllerWebhook> ControllerWebhook { get; set; }
		[Msgpack.Key(44)]
		public virtual IEnumerable<DB_ControllerMultiLanguage> ControllerMultiLanguage { get; set; }
		[Msgpack.Key(45)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
		[Msgpack.Key(46)]
		public virtual IEnumerable<DB_ControllerCategory> ControllerCategory { get; set; }
		[Msgpack.Key(47)]
		public virtual IEnumerable<DB_ControllerCommonIpFilterGroup> ControllerCommonIpFilterGroup { get; set; }
		[Msgpack.Key(48)]
		public virtual IEnumerable<DB_ControllerField> ControllerField { get; set; }
		[Msgpack.Key(49)]
		public virtual IEnumerable<DB_ControllerIpFilter> ControllerIpFilter { get; set; }
		[Msgpack.Key(50)]
		public virtual IEnumerable<DB_ControllerOpenIdCA> ControllerOpenIdCA { get; set; }
		[Msgpack.Key(51)]
		public virtual IEnumerable<DB_ControllerTag> ControllerTag { get; set; }
		[Msgpack.Key(52)]
		public virtual IEnumerable<DB_ResourceSharingRule> ResourceSharingRule { get; set; }
		[Msgpack.Key(53)]
		public virtual IEnumerable<DB_VendorControllerAgreement> VendorControllerAgreement { get; set; }
		[Msgpack.Key(54)]
		public virtual IEnumerable<DB_ContainerDynamicSeparation> ContainerDynamicSeparation { get; set; }
		[Msgpack.Key(55)]
		public virtual IEnumerable<DB_ControllerMailTemplate> ControllerMailTemplate { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerCategory table.
    /// </summary>
	[Table("ControllerCategory")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerCategory
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_category_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid category_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Category DB_Category { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorMailTemplate table.
    /// </summary>
	[Table("VendorMailTemplate")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorMailTemplate
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_mail_template_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(2)]
		public virtual string mail_template_name { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string from_mailaddress { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(4)]
		public virtual string to_mailaddress { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(5)]
		public virtual string cc_mailaddress { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(6)]
		public virtual string bcc_mailaddress { get; set; }
		[MaxLength(200)]
		[Msgpack.Key(7)]
		public virtual string title { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(8)]
		public virtual string body { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(9)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(10)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(11)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(12)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(13)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(14)]
		public virtual DB_Vendor DB_Vendor { get; set; }
		[Msgpack.Key(15)]
		public virtual IEnumerable<DB_ControllerMailTemplate> ControllerMailTemplate { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerCommonIpFilterGroup table.
    /// </summary>
	[Table("ControllerCommonIpFilterGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerCommonIpFilterGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid common_ip_filter_group_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_CommonIpFilterGroup DB_CommonIpFilterGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerField table.
    /// </summary>
	[Table("ControllerField")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerField
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_field_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? field_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? controller_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_Field DB_Field { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerIpFilter table.
    /// </summary>
	[Table("ControllerIpFilter")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerIpFilter
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_ip_filter_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[MaxLength(32)]
		[Msgpack.Key(2)]
		public virtual string ip_address { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerOpenIdCA table.
    /// </summary>
	[Table("ControllerOpenIdCA")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerOpenIdCA
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_openid_ca_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid application_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(8)]
		public virtual string access_control { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_OpenIdCertificationAuthority DB_OpenIdCertificationAuthority { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerTag table.
    /// </summary>
	[Table("ControllerTag")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerTag
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_tag_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid tag_id { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Tag DB_Tag { get; set; }
	}


    /// <summary>
    /// A class which represents the DataSchema table.
    /// </summary>
	[Table("DataSchema")]
	[Msgpack.MessagePackObject]
	public partial class DB_DataSchema
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid data_schema_id { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(1)]
		public virtual string schema_name { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string data_schema { get; set; }
		[MaxLength(4000)]
		[Msgpack.Key(4)]
		public virtual string schema_description { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_DataSchemaMultiLanguage> DataSchemaMultiLanguage { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_Controller> Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the CertifiedApplication table.
    /// </summary>
	[Table("CertifiedApplication")]
	[Msgpack.MessagePackObject]
	public partial class DB_CertifiedApplication
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid certified_application_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string application_name { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid system_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
	}


    /// <summary>
    /// A class which represents the Field table.
    /// </summary>
	[Table("Field")]
	[Msgpack.MessagePackObject]
	public partial class DB_Field
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid field_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? parent_field_id { get; set; }
		[MaxLength(50)]
		[Msgpack.Key(2)]
		public virtual string field_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_FieldMultiLanguage> FieldMultiLanguage { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ControllerField> ControllerField { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_Field> Field { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerResourceGroup table.
    /// </summary>
	[Table("ControllerResourceGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerResourceGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_resource_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? resource_group_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? controller_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_ResourceGroup DB_ResourceGroup { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the HttpMethodType table.
    /// </summary>
	[Table("HttpMethodType")]
	[Msgpack.MessagePackObject]
	public partial class DB_HttpMethodType
	{
		[Key]
		[MaxLength(20)]
		[Msgpack.Key(0)]
		public virtual string http_method_type_code { get; set; }
		[Msgpack.Key(1)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual int sort_no { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ApiCombinationConstraint> ApiCombinationConstraints { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceGroup table.
    /// </summary>
	[Table("ResourceGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid resource_group_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string resource_group_name { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(2)]
		public virtual string term_group_code { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_require_consent { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_TermsGroup DB_TermsGroup { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_ControllerResourceGroup> ControllerResourceGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the Language table.
    /// </summary>
	[Table("Language")]
	[Msgpack.MessagePackObject]
	public partial class DB_Language
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid language_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string language_name { get; set; }
		[Msgpack.Key(2)]
		public virtual int order_no { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_SampleCode> SampleCode { get; set; }
	}


    /// <summary>
    /// A class which represents the OpenIdCertificationAuthority table.
    /// </summary>
	[Table("OpenIdCertificationAuthority")]
	[Msgpack.MessagePackObject]
	public partial class DB_OpenIdCertificationAuthority
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid application_id { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(1)]
		public virtual string application_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_ApiOpenIdCA> ApiOpenIdCA { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_ControllerOpenIdCA> ControllerOpenIdCA { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_VendorOpenIdCA> VendorOpenIdCA { get; set; }
	}


    /// <summary>
    /// A class which represents the PhysicalRepository table.
    /// </summary>
	[Table("PhysicalRepository")]
	[Msgpack.MessagePackObject]
	public partial class DB_PhysicalRepository
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid physical_repository_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid repository_group_id { get; set; }
		[MaxLength(1024)]
		[Msgpack.Key(2)]
		public virtual string connection_string { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_full { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DateTime? blockchain_latest_datetime { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_RepositoryGroup DB_RepositoryGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_ContainerDynamicSeparation> ContainerDynamicSeparation { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceGroupType table.
    /// </summary>
	[Table("ResourceGroupType")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceGroupType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string resource_group_type_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string resource_group_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_TermsGroup> TermsGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the RevokeHistory table.
    /// </summary>
	[Table("RevokeHistory")]
	[Msgpack.MessagePackObject]
	public partial class DB_RevokeHistory
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid revoke_history_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid user_revoke_id { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime? start_date { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? end_date { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool? is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_UserRevoke DB_UserRevoke { get; set; }
	}


    /// <summary>
    /// A class which represents the RepositoryGroup table.
    /// </summary>
	[Table("RepositoryGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_RepositoryGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid repository_group_id { get; set; }
		[MaxLength(256)]
		[Msgpack.Key(1)]
		public virtual string repository_group_name { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(2)]
		public virtual string repository_type_cd { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual int sort_no { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_default { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_enable { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_RepositoryType DB_RepositoryType { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
		[Msgpack.Key(13)]
		public virtual IEnumerable<DB_PhysicalRepository> PhysicalRepository { get; set; }
		[Msgpack.Key(14)]
		public virtual IEnumerable<DB_SecondaryRepositoryMap> SecondaryRepositoryMap { get; set; }
		[Msgpack.Key(15)]
		public virtual IEnumerable<DB_VendorRepositoryGroup> VendorRepositoryGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the Terms table.
    /// </summary>
	[Table("Terms")]
	[Msgpack.MessagePackObject]
	public partial class DB_Term
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid terms_id { get; set; }
		[MaxLength(10)]
		[Msgpack.Key(1)]
		public virtual string version_no { get; set; }
		[Msgpack.Key(2)]
		public virtual DateTime from_date { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string terms_text { get; set; }
		[MaxLength(20)]
		[Msgpack.Key(4)]
		public virtual string term_group_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_TermsGroup DB_TermsGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserRevoke> UserRevoke { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_UserTerm> UserTerms { get; set; }
	}


    /// <summary>
    /// A class which represents the TermsGroup table.
    /// </summary>
	[Table("TermsGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_TermsGroup
	{
		[Key]
		[MaxLength(20)]
		[Msgpack.Key(0)]
		public virtual string term_group_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string term_group_name { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(2)]
		public virtual string resource_group_type_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(50)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_ResourceGroupType DB_ResourceGroupType { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_ResourceGroup> ResourceGroup { get; set; }
		[Msgpack.Key(10)]
		public virtual IEnumerable<DB_Term> Terms { get; set; }
	}


    /// <summary>
    /// A class which represents the RepositoryType table.
    /// </summary>
	[Table("RepositoryType")]
	[Msgpack.MessagePackObject]
	public partial class DB_RepositoryType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string repository_type_cd { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string repository_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_container_separation { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_ApiCombinationConstraint> ApiCombinationConstraints { get; set; }
		[Msgpack.Key(9)]
		public virtual IEnumerable<DB_RepositoryGroup> RepositoryGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the User table.
    /// </summary>
	[Table("User")]
	[Msgpack.MessagePackObject]
	public partial class DB_User
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(1)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(2)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_acrive { get; set; }
	}


    /// <summary>
    /// A class which represents the ResourceSharingRule table.
    /// </summary>
	[Table("ResourceSharingRule")]
	[Msgpack.MessagePackObject]
	public partial class DB_ResourceSharingRule
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid resource_sharing_rule_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid sharing_from_vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid sharing_from_system_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(4)]
		public virtual string resource_sharing_rule_name { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid sharing_to_vendor_id { get; set; }
		[Msgpack.Key(6)]
		public virtual Guid sharing_to_system_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(7)]
		public virtual string query { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(8)]
		public virtual string roslyn_script { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_enable { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(10)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(11)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(12)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(13)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(14)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(15)]
		public virtual DB_Controller DB_Controller { get; set; }
	}


    /// <summary>
    /// A class which represents the UserGroup table.
    /// </summary>
	[Table("UserGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_UserGroupMap> UserGroupMap { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the UserGroupMap table.
    /// </summary>
	[Table("UserGroupMap")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserGroupMap
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_group_map_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid user_group_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_UserGroup DB_UserGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the SampleCode table.
    /// </summary>
	[Table("SampleCode")]
	[Msgpack.MessagePackObject]
	public partial class DB_SampleCode
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid sample_code_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid language_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid api_id { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Language DB_Language { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Api DB_Api { get; set; }
	}


    /// <summary>
    /// A class which represents the UserResourceShare table.
    /// </summary>
	[Table("UserResourceShare")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserResourceShare
	{
		[Msgpack.Key(0)]
		public virtual Guid user_resource_group_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? resource_group_id { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(3)]
		public virtual string user_shared_type_code { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid? user_group_id { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_ResourceGroup DB_ResourceGroup { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_UserSharedType DB_UserSharedType { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_UserGroup DB_UserGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the ScriptType table.
    /// </summary>
	[Table("ScriptType")]
	[Msgpack.MessagePackObject]
	public partial class DB_ScriptType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string script_type_cd { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string script_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual int sort_no { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_Api> Api { get; set; }
	}


    /// <summary>
    /// A class which represents the UserRevoke table.
    /// </summary>
	[Table("UserRevoke")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserRevoke
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_revoke_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid? user_terms_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid? terms_id { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_finished { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid? open_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
        [Msgpack.Key(10)]
        public virtual DateTime? start_date { get; set; }
        [Msgpack.Key(11)]
        public virtual DateTime? end_date { get; set; }
        [Msgpack.Key(12)]
		public virtual DB_UserTerm DB_UserTerm { get; set; }
		[Msgpack.Key(13)]
		public virtual DB_Term DB_Term { get; set; }
		[Msgpack.Key(14)]
		public virtual IEnumerable<DB_RevokeHistory> RevokeHistory { get; set; }
	}


    /// <summary>
    /// A class which represents the SecondaryRepositoryMap table.
    /// </summary>
	[Table("SecondaryRepositoryMap")]
	[Msgpack.MessagePackObject]
	public partial class DB_SecondaryRepositoryMap
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid secondary_repository_map_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid api_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid repository_group_id { get; set; }
		[Msgpack.Key(3)]
		public virtual bool is_primary { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(4)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(6)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(8)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_Api DB_Api { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_RepositoryGroup DB_RepositoryGroup { get; set; }
	}


    /// <summary>
    /// A class which represents the ControllerMailTemplate table.
    /// </summary>
	[Table("ControllerMailTemplate")]
	[Msgpack.MessagePackObject]
	public partial class DB_ControllerMailTemplate
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid controller_mail_template_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid controller_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(3)]
		public virtual Guid vendor_mail_template_id { get; set; }
		[Msgpack.Key(4)]
		public virtual bool notify_register { get; set; }
		[Msgpack.Key(5)]
		public virtual bool notify_update { get; set; }
		[Msgpack.Key(6)]
		public virtual bool notify_delete { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(7)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(9)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(10)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(11)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(12)]
		public virtual DB_Controller DB_Controller { get; set; }
		[Msgpack.Key(13)]
		public virtual DB_Vendor DB_Vendor { get; set; }
		[Msgpack.Key(14)]
		public virtual DB_VendorMailTemplate DB_VendorMailTemplate { get; set; }
	}


    /// <summary>
    /// A class which represents the SystemLink table.
    /// </summary>
	[Table("SystemLink")]
	[Msgpack.MessagePackObject]
	public partial class DB_SystemLink
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid system_link_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid system_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(2)]
		public virtual string title { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string detail { get; set; }
		[MaxLength(512)]
		[Msgpack.Key(4)]
		public virtual string url { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_visible { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual bool is_default { get; set; }
	}


    /// <summary>
    /// A class which represents the UserSharedType table.
    /// </summary>
	[Table("UserSharedType")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserSharedType
	{
		[Key]
		[MaxLength(3)]
		[Msgpack.Key(0)]
		public virtual string user_shared_type_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string user_shared_type_name { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(2)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(3)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(5)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(6)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(7)]
		public virtual IEnumerable<DB_UserResourceShare> UserResourceShare { get; set; }
	}


    /// <summary>
    /// A class which represents the UserTerms table.
    /// </summary>
	[Table("UserTerms")]
	[Msgpack.MessagePackObject]
	public partial class DB_UserTerm
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid user_terms_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid open_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid terms_id { get; set; }
		[Msgpack.Key(3)]
		public virtual DateTime agreement_date { get; set; }
		[Msgpack.Key(4)]
		public virtual DateTime? revoke_date { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(5)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(7)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(8)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(9)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(10)]
		public virtual DB_Term DB_Term { get; set; }
		[Msgpack.Key(11)]
		public virtual IEnumerable<DB_UserRevoke> UserRevoke { get; set; }
	}


    /// <summary>
    /// A class which represents the Tag table.
    /// </summary>
	[Table("Tag")]
	[Msgpack.MessagePackObject]
	public partial class DB_Tag
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid tag_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string tag_code { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(2)]
		public virtual string tag_code2 { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(3)]
		public virtual string tag_name { get; set; }
		[Msgpack.Key(4)]
		public virtual Guid? parent_tag_id { get; set; }
		[Msgpack.Key(5)]
		public virtual Guid? tag_type_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual DB_TagType DB_TagType { get; set; }
		[Msgpack.Key(12)]
		public virtual IEnumerable<DB_TagMultiLanguage> TagMultiLanguage { get; set; }
		[Msgpack.Key(13)]
		public virtual IEnumerable<DB_ControllerTag> ControllerTag { get; set; }
		[Msgpack.Key(14)]
		public virtual IEnumerable<DB_Tag> Tag { get; set; }
	}


    /// <summary>
    /// A class which represents the TagType table.
    /// </summary>
	[Table("TagType")]
	[Msgpack.MessagePackObject]
	public partial class DB_TagType
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid tag_type_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(1)]
		public virtual string tag_type_name { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(2)]
		public virtual string detail { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual IEnumerable<DB_Tag> Tag { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorLink table.
    /// </summary>
	[Table("VendorLink")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorLink
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_link_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[MaxLength(100)]
		[Msgpack.Key(2)]
		public virtual string title { get; set; }
		[MaxLength(1000)]
		[Msgpack.Key(3)]
		public virtual string detail { get; set; }
		[MaxLength(512)]
		[Msgpack.Key(4)]
		public virtual string url { get; set; }
		[Msgpack.Key(5)]
		public virtual bool is_visible { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(6)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(7)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(8)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(9)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(10)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(11)]
		public virtual bool is_default { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorOpenIdCA table.
    /// </summary>
	[Table("VendorOpenIdCA")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorOpenIdCA
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_openid_ca_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid application_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[MaxLength(3)]
		[Msgpack.Key(8)]
		public virtual string access_control { get; set; }
		[Msgpack.Key(9)]
		public virtual DB_OpenIdCertificationAuthority DB_OpenIdCertificationAuthority { get; set; }
	}


    /// <summary>
    /// A class which represents the VendorRepositoryGroup table.
    /// </summary>
	[Table("VendorRepositoryGroup")]
	[Msgpack.MessagePackObject]
	public partial class DB_VendorRepositoryGroup
	{
		[Key]
		[Msgpack.Key(0)]
		public virtual Guid vendor_repositorygroup_id { get; set; }
		[Msgpack.Key(1)]
		public virtual Guid vendor_id { get; set; }
		[Msgpack.Key(2)]
		public virtual Guid repository_group_id { get; set; }
		[Dapper.IgnoreUpdate]
		[Msgpack.Key(3)]
		public virtual DateTime reg_date { get; set; }
		[Dapper.IgnoreUpdate]
		[MaxLength(260)]
		[Msgpack.Key(4)]
		public virtual string reg_username { get; set; }
		[Msgpack.Key(5)]
		public virtual DateTime upd_date { get; set; }
		[MaxLength(260)]
		[Msgpack.Key(6)]
		public virtual string upd_username { get; set; }
		[Msgpack.Key(7)]
		public virtual bool is_active { get; set; }
		[Msgpack.Key(8)]
		public virtual DB_RepositoryGroup DB_RepositoryGroup { get; set; }
	}

}
